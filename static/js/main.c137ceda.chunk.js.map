{"version":3,"sources":["ExtraPCP/bold.blob","logo.svg","PCPViz/DataProcessing/PearsonCorrCoeff.js","PCPViz/DataProcessing/CorrelationTable.js","PCPViz/DataProcessing/GeneticAlgorithm.js","worker.js","workerSetup.js","Home.js","PCPViz/MainPanels/BrushOnTsne/CasesMultiBrushes.js","PCPViz/SubPanels/CorrHeatMap/CasesHeatMap.js","PCPViz/SubPanels/ScatterPlot/CasesScatterPlot.js","PCPViz/SubPanels/ColorInterpolationScale.js","PCPViz/DataProcessing/CasesFactors.js","PCPViz/MainPanels/D3Vis/CasesPCP.js","PCPViz/MainPanels/CasesMain.js","PCPViz/ThreeJSVis/DeathsAxesLines.js","PCPViz/ThreeJSVis/DeathsLabel.js","PCPViz/DataProcessing/DeathsCorrelationTable.js","PCPViz/ThreeJSVis/CasesParallelCoordinates.js","PCPViz/ThreeJSVis/CasesParallelCoordinatesLabel.js","PCPViz/SubPanels/CorrHeatMap/DeathsHeatMap.js","PCPViz/MainPanels/DeathsMain.js","PCPViz/PCPViz.js","BarViz/SelectOption.js","MapViz/MapViz.js","HeatMapViz/HeatMap.js","HeatMapViz/HeatMapViz.js","CovidMain.js","MyOthers.js","history.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PearsonCorrCoeff","d1","d2","min","Math","pow","sqrt","add","a","b","n","length","slice","map","l","reduce","sum1","sum2","pow1","pow2","mulSum","i","dense","CorrelationMatrix","features","mobility_keys","Object","keys","shift","data","forEach","key","feature","push","corrMat","corr","j","corr2","toFixed","repeat","s","ch","create_gnome","len","gnome","temp","floor","random","mutated_gene","V","r","r1","cooldown","temperature","GeneticAlgorithm","casesFactors","get_correlation_matrix","gen","population","temp_gnome","sort","fa","fitness","fb","new_population","p1","new_gnome_gnome","new_gnome","self","addEventListener","e","postMessage","WebWorker","worker","code","toString","blob","Blob","Worker","URL","createObjectURL","Home","props","fetchWebWorker","event","setState","count","onmessage","console","log","componentDidMount","state","className","Component","colorSet","projection_methods","label","value","ReleaseButton","useState","isLoading","setLoading","useEffect","Promise","resolve","setTimeout","then","Button","variant","disabled","onClick","brushes","d3","id","remove","splice","myCircle","classed","setSelectedData","releaseBrushes","style","color","fontSize","backgroundColor","borderColor","width","height","brushstart","isBrushed","brush_coords","cx","cy","x0","x1","y0","y1","drawBrushes","gBrushes","brushSelection","selectAll","d","enter","insert","attr","brush","each","brushObject","this","undefined","exit","newBrush","x","y","on","selected_state","idx","brushID","Brush","document","getElementById","brushed","lastBrushID","lastBrush","selection","brushend","Date","getTime","MultipleBrushes","projectMethod","setProjectMethod","side_margin","casesFactor","minimums","maximums","items","item","index","apply","v","max","inputData","normalizedInputData","inputLabel","examples","normalized_examples","normalizedData","pca_projected_data","PCA","predict","nComponents","pca_primary_min","pca_primary_max","pca_secondary_min","pca_secondary_max","mds_projected_data","hdsp","project","mds_first_min","mds_first_max","mds_second_min","mds_second_max","pcaOutputScaled","mdsOutputScaled","model","TSNE","dim","perplexity","earlyExaggeration","learningRate","nIter","metric","init","type","run","tsneOutputScaled","getOutput","getOutputScaled","projectedScaledData","margin","svg","append","range","domain","text","selectedData","options","defaultValue","onChange","class","setSelectedAxes","marginTop","calc_pearson_corr","data1","data2","calculateCorrelation","CasesHeatMapViz","useRef","elem","jdx","correlation","heatmapElems","selectedAxes","group","variable","heatMapElement","scaleBand","padding","call","tickSize","select","myColor","interpolator","colorScheme","bandwidth","setScatterHorizontal","target","attributes","horizontal","setScatterVertical","vertical","CasesScatterPlotBottomLabel","first_axis","last_axis","hor","scatterHorizontal","ver","scatterVertical","horizon","vert","myNode","firstChild","removeChild","CasesScatterPlotLeftLabel","CasesScatterPlot","hmax","Number","MIN_SAFE_INTEGER","hmin","MAX_SAFE_INTEGER","vmax","vmin","corr_coef","ColorScale","ColorScheme","ColorInterpolationScale","colorScale","dimensions","modelWeights","filter","dimension","factor","regression","jsregression","LinearRegression","alpha","iterations","lambda","fit","theta","caseObj","CasesPCP","formatDecimalComma","wMax","values","abs","selectedAxesObj","cases_pcp_height","name","selectedAxisOrder","targetPlace","xScale","states","curve","p","curve_path","line_path","labels","getAxesOrderChange","sliderPlace","round","mi_max","MutualInfo","o","mutualInfo","mi_min","CasesMain","Array","from","k","content","getItems","corrThreshold","setCorrThreshold","miThreshold","setMiThreshold","setExtractMethod","corrSlider","setCorrSlider","miSlider","setMiSlider","setColorScheme","setSliderPlace","setTargetPlace","axesSubset","pos","MI","border","marginLeft","textAlign","Slider","step","target_pos","defaultChecked","selected_axes","axesChosen","OptAxes","CasesHeatMap","extend","MeshLine","MeshLineMaterial","deathsFactor","CovidDeathsCorrelationMatrix","disease_keys","PCPViz","React","MapViz","HeatMap","ref","disease_correlation","tooltip","html","CovidMain","OtherVis","history","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c137ceda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bold.00563e71.blob\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\r\n * calculates pearson correlation\r\n * @param {number[]} d1\r\n * @param {number[]} d2\r\n */\r\n\r\nconst PearsonCorrCoeff = (d1, d2) => {\r\n\r\n    let { min, pow, sqrt } = Math\r\n    let add = (a, b) => a + b\r\n    let n = min(d1.length, d2.length)\r\n    if (n === 0) {\r\n        return 0\r\n    }\r\n    [d1, d2] = [d1.slice(0, n), d2.slice(0, n)]\r\n    let [sum1, sum2] = [d1, d2].map(l => l.reduce(add))\r\n    let [pow1, pow2] = [d1, d2].map(l => l.reduce((a, b) => a + pow(b, 2), 0))\r\n    let mulSum = d1.map((n, i) => n * d2[i]).reduce(add)\r\n    let dense = sqrt((pow1 - pow(sum1, 2) / n) * (pow2 - pow(sum2, 2) / n))\r\n    if (dense === 0) {\r\n        return 0\r\n    }\r\n    return (mulSum - (sum1 * sum2 / n)) / dense;\r\n}\r\n\r\nexport default PearsonCorrCoeff;","import React from 'react';\r\nimport PearsonCorrCoeff from \"./PearsonCorrCoeff.js\";\r\nimport mobility from '../Data/CasesFactors.json';\r\n\r\nexport const\r\n    CorrelationMatrix = (features) => {\r\n\r\n    var mobility_keys = Object.keys(features[0]);\r\n    mobility_keys.shift();\r\n\r\n    //console.log(mobility_keys);\r\n\r\n    var data = [];\r\n    mobility_keys.forEach(function(key){\r\n        var feature = [];\r\n        features.forEach(function(data){feature.push(data[key]);})\r\n        data.push(feature);\r\n    })\r\n\r\n    // console.log(mobility_keys.length);\r\n    let corrMat = [];\r\n    for(let i=0; i<mobility_keys.length; i++){\r\n        let corr =[];\r\n        for(let j=0; j<mobility_keys.length; j++){\r\n            let corr2 = {};\r\n            corr.push((PearsonCorrCoeff(data[i], data[j])).toFixed(2));\r\n            corr2[\"coeff\"] = +(PearsonCorrCoeff(data[i], data[j])).toFixed(2);\r\n            corr2[\"x_feature\"] = mobility_keys[i];\r\n            corr2[\"y_feature\"] = mobility_keys[j];\r\n            //corr2[\"x\"] = i;\r\n            //corr2[\"y\"] = j;\r\n            corrMat.push(corr2);\r\n        }\r\n        //corrMat.push(corr);\r\n    }\r\n    return [mobility_keys, corrMat];\r\n}\r\n\r\n\r\nconst CorrelationTable = () => {\r\n\r\n    //console.log(mobility)\r\n    let [labels, corrMat] = CorrelationMatrix(mobility);\r\n    let corrTable = [];\r\n\r\n    let tableHeader = [];\r\n    let hChildren = [];\r\n    for(let i=0; i<labels.length; i++){\r\n        if(i===0)\r\n            hChildren.push(<th key={i}>{\" \"}</th>);\r\n        hChildren.push(<th key={labels[i]}>{labels[i]}</th>);\r\n        //console.log(labels[i]);\r\n    }\r\n    tableHeader.push(<thead key=\"table-header\"><tr>{hChildren}</tr></thead>);\r\n\r\n    let tableBody = [];\r\n    let bParent = [];\r\n    // console.log(corrMat);\r\n    // console.log(labels);\r\n    let label_length = labels.length;\r\n    let bChild = [];\r\n    let idx = 0;\r\n    for(let i=0; i<corrMat.length; i++){\r\n        if(i%label_length === 0){\r\n             bChild = [];\r\n             bChild.push(<td key={\"label-\"+idx}><b>{labels[idx++]}</b></td>);\r\n        }\r\n        bChild.push(<td key={\"corr-\"+i}>{corrMat[i][\"coeff\"]}</td>);\r\n        if(i%label_length === label_length -1 ){\r\n            bParent.push(<tr key={i+\"th-row-\"+(i%label_length)+\"th-col\"}>{bChild}</tr>);\r\n        }\r\n    }\r\n    tableBody.push(<tbody key=\"table-body\">{bParent}</tbody>);\r\n    corrTable.push(tableHeader);\r\n    corrTable.push(tableBody);\r\n\r\n    return corrTable;\r\n}\r\n\r\nexport default CorrelationTable;\r\n                // let bChildren =[];\r\n                // bChildren.push(<td></td>)\r\n                // for(let j=0; j<labels.length; j++){\r\n//     if(j ==0)\r\n//         bChildren.push(<td>{labels[i]}</td>);\r\n//     //console.log(corrMat[i][j]);\r\n//     bChildren.push(<td>{corrMat[i][j]}</td>)\r\n// }\r\n// bParent.push(<tr>{bChildren}</tr>);\r\n","import {CorrelationMatrix} from './CorrelationTable.js';\r\nimport casesFactors from '../Data/CasesFactors.json';\r\nvar POP_SIZE = 20;\r\nvar corrMatrix;\r\n\r\nfunction get_correlation_matrix()\r\n{\r\n    let [labels, corrMat] = CorrelationMatrix(casesFactors);\r\n    corrMatrix = corrMat;\r\n   // console.log(corrMat);\r\n}\r\n\r\nfunction lessthan(t1, t2)\r\n{\r\n    return t1.fitness < t2.fitness;\r\n}\r\n\r\nfunction cal_fitness(gnome){\r\n    var f = 0;\r\n    var i = 0;\r\n    //console.log(corrMatrix);\r\n    //console.log(gnome);\r\n    /*for(i=0; i<gnome.length -1; i++){\r\n         f += (1- Math.abs(corrMatrix[gnome[i]][gnome[i+1]]));\r\n    }*/\r\n    return f;\r\n}\r\n\r\nfunction repeat(s, ch)\r\n{\r\n    var i=0;\r\n    for(i=0; i<s.length; i++){\r\n        if(s[i] == ch)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nfunction create_gnome(len)\r\n{\r\n    var gnome = [];\r\n    while(true){\r\n        if(gnome.length == len){\r\n            break;\r\n        }\r\n        var temp = Math.floor *( (Math.random() * len) + 1);\r\n        if(!repeat(gnome, temp)){\r\n            gnome.push(temp);\r\n        }\r\n    }\r\n\r\n    return gnome;\r\n}\r\n\r\nfunction mutated_gene(gnome)\r\n{\r\n    var V = gnome.length;\r\n    while(true){\r\n        var r = Math.floor( Math.random()* V + 1); // random number from 1 to V\r\n        var r1 = Math.floor( Math.random() * V + 1); // random number from 1 to V\r\n        if(r1 != r){\r\n            var temp = gnome[r];\r\n            gnome[r] = gnome[r1];\r\n            gnome[r1] = temp;\r\n            break;\r\n        }\r\n    }\r\n    return gnome;\r\n}\r\n\r\nfunction cooldown(temperature){\r\n    return (90*temperature)/100;\r\n}\r\n\r\nconst GeneticAlgorithm = (len) => {\r\n    get_correlation_matrix();\r\n\r\n    // generation number\r\n    var gen = 1;\r\n    // number of gene iterations\r\n    var gen_thres = 20;\r\n\r\n    let population = [];\r\n\r\n    var i = 0;\r\n    // populating the GNOME pool\r\n    for(i=0; i<POP_SIZE; i++){\r\n        let temp_gnome = create_gnome(len);\r\n        let temp = {\"gnome\":temp_gnome, \"fitness\": cal_fitness(temp_gnome)};\r\n        population.push(temp);\r\n    }\r\n\r\n    let found = false;\r\n    var temperature = 100000;\r\n\r\n    while(temperature > 1000 && gen <= gen_thres){\r\n        //console.log(population);\r\n        population.sort((a,b) => {\r\n            let fa = a.fitness;\r\n            let fb = b.fitness;\r\n            if(fa<fb){\r\n                return -1;\r\n            }\r\n            if(fa>fb){\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        let new_population = [];\r\n\r\n        var j=0;\r\n        for(j=0; j<POP_SIZE; j++){\r\n            var p1 = population[j];\r\n            while(true){\r\n                let new_g = mutated_gene(p1.gnome);\r\n                var new_gnome_gnome = new_g;\r\n                var new_gnome_fitness = cal_fitness(new_gnome_gnome);\r\n                var new_gnome = {\"gnome\":new_gnome_gnome, \"fitness\":new_gnome_fitness};\r\n\r\n                if(new_gnome.fitness > population[j].fitness){\r\n                    new_population.push(new_gnome);\r\n                    break;\r\n                }\r\n                else{\r\n                    var prob = Math.pow(2.7, -1 * (new_gnome.fitness - population[j].fitness)/temperature);\r\n                    if(prob > 0.5){\r\n                        new_population.push(new_gnome);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        temperature = cooldown(temperature);\r\n        population = new_population;\r\n        gen++;\r\n    }\r\n}\r\n\r\nexport default GeneticAlgorithm;","import GeneticAlgorithm from \"./PCPViz/DataProcessing/GeneticAlgorithm\";\r\n\r\nexport default () => {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    self.addEventListener(\"message\", e => {\r\n        // eslint-disable-line no-restricted-globals\r\n        if (!e) return;\r\n\r\n        const users = [];\r\n\r\n      //  console.log(\"yaho\")\r\n        GeneticAlgorithm();\r\n        /*for (let i = 0; i < 100000; i++) {\r\n            userDetails.id = i++;\r\n            userDetails.dateJoined = Date.now();\r\n            users.push(userDetails);\r\n\r\n        }*/\r\n\r\n        postMessage(users);\r\n\r\n    });\r\n};","export default class WebWorker {\r\n    constructor(worker) {\r\n        const code = worker.toString();\r\n        const blob = new Blob([\"(\" + code + \")()\"]);\r\n        return new Worker(URL.createObjectURL(blob));\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport ReactCountdownClock from \"react-countdown-clock\";\r\nimport worker from \"./worker.js\";\r\nimport WebWorker from \"./workerSetup\";\r\nimport \"./App.css\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            count: 0\r\n        };\r\n\r\n    }\r\n\r\n    fetchWebWorker = () => {\r\n        this.worker.postMessage(\"Fetch Users\");\r\n        //console.log(\"Fetch\");\r\n        this.worker.addEventListener(\"message\", event => {\r\n            this.setState({\r\n                count: event.data.length\r\n            });\r\n        });\r\n        this.worker.onmessage = event => {\r\n          //  console.log(event.data);\r\n            console.log(\"done\");\r\n\r\n        }\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.worker = new WebWorker(worker);\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-bottom\">\r\n\r\n                <section className=\"App-right\">\r\n                    {/*<ReactCountdownClock*/}\r\n                    {/*    seconds={100}*/}\r\n                    {/*    color=\"#e56\"*/}\r\n                    {/*    alpha={0.9}*/}\r\n                    {/*    size={300}*/}\r\n                    {/*    ref = {this.count}*/}\r\n                    {/*/>*/}\r\n                    {/*<p className=\"text-center\">Total User Count: {this.state.count}</p>*/}\r\n                    {/*<button className=\"btn-worker\" onClick={this.fetchWebWorker}>*/}\r\n                    {/*    Fetch Users with Web Worker*/}\r\n                    {/*</button>*/}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import * as d3 from 'd3';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport casesFactor from \"../../Data/CasesFactors.json\";\r\nimport TSNE from \"tsne-js\";\r\nimport {PCA} from \"ml-pca\";\r\nimport * as hdsp from \"hdsp2\";\r\nimport Select from 'react-select';\r\n\r\nlet colorSet = [\"#E7E84C\", \"#FBFF87\", \"#FFDF00\", \"#E8D051\", \"#FFF249\"];\r\nconst projection_methods = [\r\n    {label: \"t-SNE\", value: 0},\r\n    {label: \"PCA\", value: 1},\r\n    // {label: \"MDS\", value: 2}\r\n];\r\n\r\nfunction simulateNetworkRequest() {\r\n    return new Promise((resolve) => setTimeout(resolve, 500));\r\n}\r\n\r\nfunction ReleaseButton(props) {\r\n    const buttonStyle = {\r\n        color: \"#fff\",\r\n        fontSize: '12px',\r\n        backgroundColor: \"#5a6268\",\r\n        borderColor: \"#6c757d\",\r\n        width: \"120px\",\r\n        height: \"30px\",\r\n    };\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n            simulateNetworkRequest().then(() => {\r\n                setLoading(false);\r\n            });\r\n        }\r\n\r\n        //props.setSelectedData({});\r\n    }, [isLoading]);\r\n\r\n    const handleClick = () => {\r\n        setLoading(true);\r\n        releaseBrushes();\r\n    }\r\n\r\n    function releaseBrushes() {\r\n\r\n        for (var i = 0; i < brushes.length - 1; i++) {\r\n            d3.select(\"g#brush-\" + brushes[i].id + \".brush\").remove();\r\n            //d3.select(\"#brush-\"+i).remove();\r\n        }\r\n        brushes.splice(0, brushes.length - 1);\r\n\r\n        myCircle.classed(\"selected\", function () {\r\n            return false;\r\n        });\r\n        props.setSelectedData({});\r\n        // document.getElementById(\"#brush-\" + defaultID).setAttribute(\"id\", \"brush-0\");\r\n    }\r\n\r\n    return (<>\r\n            <Button\r\n                variant=\"primary\"\r\n                disabled={isLoading}\r\n                onClick={!isLoading ? handleClick : null}\r\n                style={buttonStyle}>\r\n                {isLoading ? 'Releasing...' : 'Release Brushes'}\r\n\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\n\r\n// We also keep the actual d3-brush functions and their IDs in a list:\r\nvar brushes = [];\r\nvar myCircle;\r\n\r\nfunction brushstart() {\r\n}\r\n\r\nfunction brushed(myCircle, setSelectedData, x, y) {\r\n    let selected_state = {};\r\n\r\n    myCircle.classed(\"selected\", function (d) {\r\n        for (var idx = 0; idx < brushes.length; idx++) {\r\n            // Figure out if our latest brush has a selection\r\n            var brushID = brushes[idx].id;\r\n            var Brush = document.getElementById('brush-' + brushID);\r\n            var selection = d3.brushSelection(Brush);\r\n\r\n            if (isBrushed(selection, x(d[0] * 1.0), y(d[1] * 1.0)) === true) {\r\n\r\n                // selected_axes[d[\"x_feature\"]] = \"true\";\r\n                //if(!(d[2] in selected_state))\r\n                selected_state[d[2]] = colorSet[idx]; // \"true\";\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    });\r\n    setSelectedData(selected_state);\r\n\r\n}\r\n\r\n// A function that return TRUE or FALSE according if a dot is in the selection or not\r\nfunction isBrushed(brush_coords, cx, cy) {\r\n    if (brush_coords === null) return false;\r\n    var x0 = brush_coords[0][0],\r\n        x1 = brush_coords[1][0],\r\n        y0 = brush_coords[0][1],\r\n        y1 = brush_coords[1][1];\r\n    return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;    // This return TRUE or FALSE depending on if the points is in the selected area\r\n}\r\n\r\nfunction drawBrushes(gBrushes) {\r\n\r\n    var brushSelection = gBrushes\r\n        .selectAll('.brush')\r\n        .data(brushes, function (d) {\r\n            return d.id\r\n        });\r\n\r\n    // Set up new brushes\r\n    brushSelection.enter()\r\n        .insert(\"g\", '.brush')\r\n        .attr('class', 'brush')\r\n        .attr('id', function (brush) {\r\n            return \"brush-\" + brush.id;\r\n        })\r\n        .each(function (brushObject) {\r\n            //call the brush\r\n            brushObject.brush(d3.select(this));\r\n        });\r\n\r\n    /* REMOVE POINTER EVENTS ON BRUSH OVERLAYS\r\n     *\r\n     * This part is abbit tricky and requires knowledge of how brushes are implemented.\r\n     * They register pointer events on a .overlay rectangle within them.\r\n     * For existing brushes, make sure we disable their pointer events on their overlay.\r\n     * This frees the overlay for the most current (as of yet with an empty selection) brush to listen for click and drag events\r\n     * The moving and resizing is done with other parts of the brush, so that will still work.\r\n     */\r\n    brushSelection\r\n        .each(function (brushObject) {\r\n            d3.select(this)\r\n                .attr('class', 'brush')\r\n                .selectAll('.overlay')\r\n                .style('pointer-events', function () {\r\n                    var brush = brushObject.brush;\r\n                    if (brushObject.id === brushes[brushes.length - 1].id && brush !== undefined) {\r\n                        return 'all';\r\n                    } else {\r\n                        return 'none';\r\n                    }\r\n                });\r\n        })\r\n\r\n    brushSelection.exit()\r\n        .remove();\r\n}\r\n\r\n/* CREATE NEW BRUSH\r\n *\r\n * This creates a new brush. A brush is both a function (in our array) and a set of predefined DOM elements\r\n * Brushes also have selections. While the selection are empty (i.e. a suer hasn't yet dragged)\r\n * the brushes are invisible. We will add an initial brush when this viz starts. (see end of file)\r\n * Now imagine the user clicked, moved the mouse, and let go. They just gave a selection to the initial brush.\r\n * We now want to create a new brush.\r\n * However, imagine the user had simply dragged an existing brush--in that case we would not want to create a new one.\r\n * We will use the selection of a brush in brushend() to differentiate these cases.\r\n */\r\nfunction newBrush(gBrushes, myCircle, setSelectedData, x, y) {\r\n    var brush = d3.brush()\r\n        .on(\"start\", brushstart)\r\n        .on(\"brush\", (event) => brushed(myCircle, setSelectedData, x, y))\r\n        .on(\"end\", (event) => brushend(gBrushes));\r\n\r\n    brushes.push({id: new Date().getTime(), brush: brush});\r\n\r\n    function brushend(gBrushes) {\r\n\r\n        // Figure out if our latest brush has a selection\r\n        var lastBrushID = brushes[brushes.length - 1].id;\r\n        var lastBrush = document.getElementById('brush-' + lastBrushID);\r\n        var selection = d3.brushSelection(lastBrush);\r\n\r\n        // If it does, that means we need another one\r\n        if (selection && selection[0] !== selection[1]) {\r\n            newBrush(gBrushes, myCircle, setSelectedData, x, y);\r\n        }\r\n\r\n        // Always draw brushes\r\n        drawBrushes(gBrushes);\r\n    }\r\n}\r\n\r\nfunction projectedScaledData(data, normalizedData, label)\r\n{\r\n    const pca = new PCA(data);\r\n    var pca_projected_data = pca.predict(data, {nComponents: 2}).data;\r\n    var pca_primary_min= (Math.min.apply(null, pca_projected_data.map((v) => v[0])));\r\n    var pca_primary_max= (Math.max.apply(null, pca_projected_data.map((v) => v[0])));\r\n    var pca_secondary_min = (Math.min.apply(null, pca_projected_data.map((v) => v[1])));\r\n    var pca_secondary_max = (Math.max.apply(null, pca_projected_data.map((v) => v[1])));\r\n\r\n    var mds_projected_data = hdsp.MDSSGD.project(normalizedData, 2);\r\n    var mds_first_min=(Math.min.apply(null, mds_projected_data.map((v) => v[0])));\r\n    var mds_first_max=(Math.max.apply(null, mds_projected_data.map((v) => v[0])));\r\n    var mds_second_min=(Math.min.apply(null, mds_projected_data.map((v) => v[1])));\r\n    var mds_second_max=(Math.max.apply(null, mds_projected_data.map((v) => v[1])));\r\n\r\n    var pcaOutputScaled = [];\r\n    var mdsOutputScaled = [];\r\n    for(var i=0; i<pca_projected_data.length; i++){\r\n        pcaOutputScaled.push(\r\n            [2*((pca_projected_data[i][0] - pca_primary_min)/(pca_primary_max-pca_primary_min)) -1,\r\n            2*((pca_projected_data[i][1] - pca_secondary_min)/(pca_secondary_max - pca_secondary_min))-1]);\r\n    }\r\n    for(var i=0; i<mds_projected_data.length; i++){\r\n        mdsOutputScaled.push(\r\n            [2*((mds_projected_data[i][0]-mds_first_min)/(mds_first_max-mds_first_min))-1,\r\n            2*((mds_projected_data[i][1]-mds_second_min)/(mds_second_max-mds_second_min))-1]);\r\n    }\r\n\r\n\r\n    let model = new TSNE({\r\n        dim: 2,\r\n        perplexity: 30.0,\r\n        earlyExaggeration: 4.0,\r\n        learningRate: 100.0,\r\n        nIter: 1000,\r\n        metric: 'euclidean'\r\n    });\r\n\r\n    model.init({\r\n        data: data,\r\n        type: 'dense'\r\n    });\r\n\r\n    // note: computation-heavy action happens here\r\n    let [error, iter] = model.run();\r\n\r\n    // `output` is unpacked ndarray (regular nested javascript array)\r\n    let output = model.getOutput();\r\n\r\n    // `outputScaled` is `output` scaled to a range of [-1, 1]\r\n    let tsneOutputScaled = model.getOutputScaled();\r\n    for (let i = 0; i < tsneOutputScaled.length; i++) {\r\n        pcaOutputScaled[i].push(label[i]);\r\n        mdsOutputScaled[i].push(label[i]);\r\n        tsneOutputScaled[i].push(label[i]);\r\n    }\r\n    return [pcaOutputScaled, mdsOutputScaled, tsneOutputScaled];\r\n}\r\n\r\nexport default function MultipleBrushes(props) {\r\n\r\n    const [selectedData, setSelectedData] = useState({});\r\n\r\n    const [projectMethod, setProjectMethod] = useState(0);\r\n\r\n    let window_width = 450;\r\n    let window_height = 450;\r\n    var side_margin = (window_width - 0) / (2 * casesFactor.length);\r\n    var keys = [];\r\n    var minimums = {};\r\n    var maximums = {};\r\n    for (let key in props.items) {\r\n        if (props.items[key][\"id\"] !== 'cases')\r\n            keys.push(props.items[key][\"id\"]);\r\n    }\r\n\r\n    Object.keys(keys).forEach(function (item, index) {\r\n        minimums[keys[item]] = (Math.min.apply(null, casesFactor.map((v) => v[keys[item]])));\r\n        maximums[keys[item]] = (Math.max.apply(null, casesFactor.map((v) => v[keys[item]])));\r\n    });\r\n\r\n    var inputData = [];\r\n    var normalizedInputData = [];\r\n    var inputLabel = [];\r\n    for (var i = 0; i < casesFactor.length; i++) {\r\n        inputLabel.push(casesFactor[i][\"states\"]);\r\n        var examples = [];\r\n        var normalized_examples = [];\r\n        for (var key of keys) {\r\n            examples.push(casesFactor[i][key]);\r\n            normalized_examples.push((casesFactor[i][key] - minimums[key]) / (maximums[key] - minimums[key]))\r\n        }\r\n        inputData.push(examples);\r\n        normalizedInputData.push(normalized_examples);\r\n    }\r\n\r\n    var [pcaOutputScaled, mdsOutputScaled, tsneOutputScaled]\r\n        = projectedScaledData(inputData, normalizedInputData, inputLabel);\r\n\r\n    var margin = {\r\n            top: 10,\r\n            right: 10,\r\n            bottom: 10,\r\n            left: 10\r\n        },\r\n        width = window_width - margin.left - margin.right,\r\n        height = window_height - margin.top - margin.bottom;\r\n\r\n    useEffect(() => {\r\n\r\n        d3.select(\"#cases-projection\").remove();\r\n        var svg = d3.select(\"#cases-sub-multi-brush-vis\").append(\"svg\")\r\n            .attr(\"id\", \"cases-projection\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n\r\n        svg.append(\"rect\")\r\n            .attr(\"class\", \"grid-background\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .style(\"fill\", \"#FFF\");\r\n\r\n        // We initially generate a SVG group to keep our brushes' DOM elements in:\r\n        var gBrushes = svg.append('g')\r\n            .attr(\"class\", \"brushes\")\r\n\r\n        gBrushes.style(\"-moz-box-shadow\", \"#555 0 0 8px\")\r\n            .style(\"-webkit-box-shadow\", \"#555 0 0 8px\")\r\n            .style(\"-o-box-shadow\", \"#555 0 0 8px\")\r\n            .style(\"box-shadow\", \"#555 0 0 8px\");\r\n\r\n        // Add X axis\r\n        var x = d3.scaleLinear()\r\n            .range([side_margin, width - side_margin])\r\n            .domain([-1.05, 1.05]);\r\n\r\n        var y = d3.scaleLinear()\r\n            .domain([-1, 1])\r\n            .range([height, 0]);\r\n\r\n        // Add X axis\r\n        var x = d3.scaleLinear()\r\n            .range([side_margin, width - side_margin])\r\n            .domain([-1.05, 1.05]);\r\n\r\n        // Add Y axis\r\n        var y = d3.scaleLinear()\r\n            .domain([-1, 1])\r\n            .range([height, 0]);\r\n\r\n        myCircle = svg.selectAll('g')\r\n            .data(function(){\r\n                if(projectMethod == 0) return tsneOutputScaled;\r\n                else if(projectMethod == 1) return pcaOutputScaled;\r\n                return mdsOutputScaled;\r\n            })\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"cx\", function (d) {\r\n                return x(d[0] * 1.0);\r\n            })\r\n            .attr(\"cy\", function (d) {\r\n                return y(d[1] * 1.0);\r\n            })\r\n            .attr(\"r\", 6)\r\n            .style(\"fill\", function (d) {\r\n                return \"blue\";                // return \"#EE786E\"//\"red\"\r\n            })\r\n            .style(\"opacity\", 0.5);\r\n\r\n        var myText = svg.selectAll(\"g\")\r\n            .data( function(){\r\n                if(projectMethod == 0) return tsneOutputScaled;\r\n                else if(projectMethod == 1) return pcaOutputScaled;\r\n                return mdsOutputScaled;\r\n            })\r\n            .enter()\r\n            .append(\"text\")\r\n            .text(function (d) {\r\n                return d[2]\r\n            })\r\n            .attr(\"x\", function (d) {\r\n                return x(d[0] * 1.0);\r\n            })\r\n            .attr(\"y\", function (d) {\r\n                return y(d[1] * 1.0);\r\n            })\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"10px\");\r\n\r\n        newBrush(gBrushes, myCircle, props.setSelectedData, x, y);\r\n        drawBrushes(gBrushes);\r\n\r\n    }, [props.selectedData, projectMethod]);\r\n\r\n    return (\r\n        <div id=\"multi-brushes-wrapper\">\r\n            <div id=\"brush-container\" style={{height: '50px'}}>\r\n                <div style={{width: '250px'}}>\r\n                    <Select options={projection_methods} defaultValue={{label: \"t-SNE\", value: 0}}\r\n                            onChange={v => {\r\n                                setProjectMethod(v.value);\r\n                            }}\r\n                            style={{width: '100%'}}/>\r\n                </div>\r\n                <div id=\"brush-release-button-wrapper\">\r\n                    <ReleaseButton class=\"btn-float-right\" selectedData={props.selectedData}\r\n                                   setSelectedData={props.setSelectedData}\r\n                                   setSelectedAxes={props.setSelectedAxes}></ReleaseButton>\r\n                </div>\r\n            </div>\r\n            <div id=\"cases-sub-multi-brush-vis\" style={{marginTop: '0.5rem'}}>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport {scaleBand} from 'd3-scale';\r\nimport casesFactor from './../../Data/CasesFactors.json';\r\nimport calculateCorrelation from 'calculate-correlation';\r\n\r\nvar data = [];\r\n\r\nconst correlation = (casesFactor) => {\r\n\r\n    if(data.length > 0) return data;\r\n\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n\r\n    for(var idx =0; idx<keys.length; idx++) {\r\n        for(var jdx =0; jdx<keys.length; jdx++) {\r\n            let data1 = [];\r\n            let data2 = [];\r\n            Object.keys(casesFactor).forEach(function (key) {\r\n                let elem = {};\r\n                data1.push(casesFactor[key][keys[idx]]);\r\n                data2.push(casesFactor[key][keys[jdx]]);\r\n                // data[keys[idx]+'&'+keys[idx+1]] = calc_pearson_corr(data1, data2) ;\r\n                elem['group'] = keys[idx];\r\n                elem['variable'] = keys[jdx];\r\n                elem['value'] = calc_pearson_corr(data1, data2);\r\n                data.push(elem);\r\n            });\r\n        }\r\n    }\r\n\r\n    return data;\r\n\r\n};\r\n\r\nconst calc_pearson_corr = (data1, data2) => {\r\n    return calculateCorrelation(data1, data2);\r\n};\r\n\r\n\r\nconst CasesHeatMapViz = (props) => {\r\n    const ref = useRef()\r\n\r\n    // set the dimensions and margins of the graph\r\n    var margin = {top: 10, right: 50, bottom: 70, left: 180},\r\n        width = 700 - margin.left - margin.right,\r\n        height = 500 - margin.top - margin.bottom;\r\n\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n    correlation(casesFactor);\r\n\r\n    var heatmapElems = [];\r\n    useEffect(() => {\r\n\r\n        var selectedAxes = props.selectedAxes;\r\n\r\n        heatmapElems = [];\r\n        for(var i=0; i<data.length; i++) {\r\n            if (! ((data[i].group in selectedAxes) && (data[i].variable in selectedAxes)) ){\r\n                continue;\r\n            }\r\n            else{\r\n                heatmapElems.push(data[i]);\r\n            }\r\n        }\r\n        d3.select(\"#casesheatmapvis\").remove();\r\n\r\n        const heatMapElement = d3.select(\"#cases-sub-heatmap-vis\")\r\n            .append(\"svg\")\r\n            .attr(\"id\",\"casesheatmapvis\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \", \" + margin.top +\")\" )\r\n            .style(\"text-anchor\", \"end\")\r\n\r\n        // Build X scales and axis\r\n        var x = scaleBand()\r\n            .range([0, width])\r\n            .domain(heatmapElems.map(d=>d.group))\r\n            .padding(0.05);\r\n\r\n        heatMapElement.append(\"g\")\r\n            .style(\"fond-size\", 8)\r\n            .attr(\"transform\", \"translate(0, \" + height + \")\")\r\n            .call(d3.axisBottom(x).tickSize(0))\r\n            .select(\".domain\").remove()\r\n\r\n        heatMapElement\r\n            .selectAll(\"text\")\r\n            .attr(\"transform\",\"rotate(90)\" )\r\n            .style(\"text-anchor\", \"start\")\r\n\r\n        // Build Y scales and axis\r\n        var y = scaleBand()\r\n            .range([height, 0])\r\n            .domain(heatmapElems.map(d=>d.variable))\r\n            .padding(0.05)\r\n\r\n        heatMapElement.append(\"g\")\r\n            .style(\"font-size\", 10)\r\n            .call(d3.axisLeft(y).tickSize(0))\r\n            .select(\".domain\")\r\n            .remove()\r\n\r\n        var myColor = d3.scaleSequential()\r\n            .interpolator(d3.interpolateRdBu)\r\n            .domain([-1, 1]);\r\n\r\n        if(props.colorScheme == \"Inferno\"){\r\n            myColor = d3.scaleSequential()\r\n                .interpolator(d3.interpolateInferno)\r\n                .domain([-1, 1]);\r\n        }\r\n        else if(props.colorScheme == \"RdBu\"){\r\n            myColor = d3.scaleSequential()\r\n                .interpolator(d3.interpolateRdBu)\r\n                .domain([-1, 1]);\r\n        }\r\n        else if(props.colorScheme == \"RdYlGn\"){\r\n            myColor = d3.scaleSequential()\r\n                .interpolator(d3.interpolateRdYlGn)\r\n                .domain([-1, 1]);\r\n        }\r\n        else if(props.colorScheme == \"RdGy\"){\r\n            myColor = d3.scaleSequential()\r\n                .interpolator(d3.interpolateRdGy)\r\n                .domain([-1, 1]);\r\n        }\r\n        // console.log(myColor(0.5));\r\n\r\n        var tooltip = d3.select(\"#cases-sub-heatmap-map-vis\")\r\n            .append(\"div\")\r\n            .style(\"opacity\", 0)\r\n            .style(\"background-color\", \"white\")\r\n            .style(\"border\", \"solid\")\r\n            .style(\"border-width\", \"2px\")\r\n            .style(\"border-radius\", \"5px\")\r\n            .style(\"padding\", \"5px\")\r\n            .style(\"max-width\", \"50px\")\r\n\r\n        // Three function that change the tooltip when user hover / move / leave a cell\r\n        var mouseover = function(d) {\r\n            d3.select(this)\r\n                .style(\"stroke\", \"black\")\r\n                .style(\"opacity\", 1)\r\n        }\r\n\r\n        var mousemove = function(d) {\r\n        }\r\n\r\n        var mouseleave = function(d) {\r\n            d3.select(this)\r\n                .style(\"stroke\", \"none\")\r\n                .style(\"opacity\", 0.8)\r\n        }\r\n\r\n        var click = function(d){\r\n            props.setScatterHorizontal({\"horizon\":d.target.attributes.horizontal.value});\r\n            props.setScatterVertical({\"vert\":d.target.attributes.vertical.value});\r\n        }\r\n\r\n        heatMapElement.selectAll()\r\n            .data(heatmapElems, function(d) {return d.group+':'+d.variable;})\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", function(d) { return x(d.group) })\r\n            .attr(\"y\", function(d) { return y(d.variable) })\r\n            .attr(\"rx\", 4)\r\n            .attr(\"ry\", 4)\r\n            .attr(\"horizontal\", function(d) {return d.group})\r\n            .attr(\"vertical\", function(d) {return d.variable})\r\n            .attr(\"width\", x.bandwidth() )\r\n            .attr(\"height\", y.bandwidth() )\r\n            .attr(\"value\", function(d) {return d.value})\r\n            .style(\"fill\", function(d) { return myColor(d.value)} )\r\n            .style(\"stroke-width\", 4)\r\n            .style(\"stroke\", \"none\")\r\n            .style(\"opacity\", 0.8)\r\n            .on(\"mouseover\", mouseover)\r\n            .on(\"mousemove\", mousemove)\r\n            .on(\"mouseleave\", mouseleave)\r\n            .on(\"click\", click)\r\n\r\n\r\n    }, [props.colorScheme, props.selectedAxes])\r\n    return(\r\n        // <></>\r\n        <div className=\"cases-sub-heatmap-map-vis\" id=\"cases-sub-heatmap-map-vis\">\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CasesHeatMapViz;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport casesFactor from './../../Data/CasesFactors.json';\r\nimport calculateCorrelation from 'calculate-correlation';\r\n\r\nconst CasesScatterPlot = (props) => {\r\n\r\n    var hmax = Number.MIN_SAFE_INTEGER;\r\n    var hmin = Number.MAX_SAFE_INTEGER;\r\n    var vmax = Number.MIN_SAFE_INTEGER;\r\n    var vmin = Number.MAX_SAFE_INTEGER;\r\n\r\n    // set the dimensions and margins of the plot\r\n    var margin = {top: 30, right: 30, bottom: 70, left: 80},\r\n        width = 440 - margin.left - margin.right,\r\n        height = 360 - margin.top - margin.bottom;\r\n\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n    var first_axis = keys[0];\r\n    var last_axis = keys[keys.length-1];\r\n\r\n    useEffect(() => {\r\n        var hor = props.scatterHorizontal;\r\n        var ver = props.scatterVertical;\r\n\r\n        if(hor.horizon === \"None\" && ver.vert === \"None\"){\r\n            hor.horizon = first_axis;\r\n            ver.vert = last_axis;\r\n        }\r\n\r\n        var data =[];\r\n\r\n        if(hor.horizon !== 'None' && ver.vert !== 'None'){\r\n            Object.keys(casesFactor).forEach(function (idx) {\r\n                //console.log(hor.horizon);\r\n                hmax = Math.max(hmax, casesFactor[idx][hor.horizon]);\r\n                hmin = Math.min(hmin, casesFactor[idx][hor.horizon])\r\n                vmax = Math.max(vmax, casesFactor[idx][ver.vert]);\r\n                vmin = Math.min(vmin, casesFactor[idx][ver.vert])\r\n                data.push([casesFactor[idx][hor.horizon], casesFactor[idx][ver.vert]]);\r\n            });\r\n        }\r\n\r\n        const myNode = document.getElementById(\"cases-sub-scatterplot-vis-right-top\");\r\n        if(myNode.firstChild)\r\n            myNode.removeChild(myNode.firstChild);\r\n\r\n        // append the svg object to the body of the page\r\n        var svg = d3.select(\"#cases-sub-scatterplot-vis-right-top\")\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        // Add X axis\r\n        var x = d3.scaleLinear()\r\n            .domain([hmin, hmax])\r\n            .range([ 0, width ]);\r\n\r\n        if(hmax !== Number.MIN_SAFE_INTEGER && hmin !== Number.MAX_SAFE_INTEGER){\r\n            svg.append(\"g\")\r\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                .call(d3.axisBottom(x));\r\n        }\r\n\r\n        var text = svg.selectAll(\"text\");\r\n        text.attr(\"transform\",\"translate(0,\" + margin.left + \")\" )\r\n            .attr(\"transform\",\"rotate(90)\" )\r\n            .style(\"text-anchor\", \"start\");\r\n\r\n        // Add Y axis\r\n        var y = d3.scaleLinear()\r\n            .domain([vmin, vmax])\r\n            .range([ height, 0]);\r\n        if(vmax !== Number.MIN_SAFE_INTEGER && vmin !== Number.MAX_SAFE_INTEGER){\r\n            svg.append(\"g\").call(d3.axisLeft(y));\r\n        }\r\n       // Add dots\r\n\r\n\r\n        var data1=[], data2=[];\r\n        for(var i=0; i<data.length; i++){\r\n            data1.push(data[i][0]); data2.push(data[i][1]);\r\n        }\r\n        var corr_coef = calculateCorrelation(data1, data2);\r\n\r\n        var myColor = 0;\r\n        if(props.colorScheme === \"Inferno\" || props.colorScheme === undefined){\r\n            var ColorScale = d3.scaleSequential()\r\n                .interpolator(d3.interpolateInferno)\r\n                .domain([-1, 1]);\r\n            myColor = ColorScale(corr_coef);\r\n        }\r\n        else if(props.colorScheme === \"RdBu\"){\r\n            var ColorScale = d3.scaleSequential()\r\n                .interpolator(d3.interpolateRdBu)\r\n                .domain([-1, 1]);\r\n            myColor = ColorScale(corr_coef);\r\n        }\r\n        else if(props.colorScheme === \"RdYlGn\"){\r\n            var ColorScale = d3.scaleSequential()\r\n                .interpolator(d3.interpolateRdYlGn)\r\n                .domain([-1, 1]);\r\n            myColor = ColorScale(corr_coef);\r\n        }\r\n        else{ // if(props.colorScheme === \"RdGy\")\r\n            var ColorScale = d3.scaleSequential()\r\n                .interpolator(d3.interpolateRdGy)\r\n                .domain([-1, 1]);\r\n            myColor = ColorScale(corr_coef);\r\n        }\r\n        // console.log(hor.horizon , ver.vert);\r\n\r\n        svg.append('g')\r\n            .selectAll(\"dot\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"cx\", function (d) { return x(d[0]); } )\r\n            .attr(\"cy\", function (d) { return y(d[1]); } )\r\n            .attr(\"r\", 4.5)\r\n            .style(\"fill\", myColor)\r\n            // .style(\"fill\", \"#69b3a2\")\r\n\r\n    }, [props.scatterHorizontal, props.scatterVertical, props.ColorScheme])\r\n\r\n    return (\r\n        <></>\r\n    )\r\n}\r\n\r\nexport const CasesScatterPlotBottomLabel = (props) => {\r\n\r\n    var margin = {top: 30, right: 30, bottom: 50, left: 50};\r\n    var width = 420 - margin.left - margin.right,\r\n        height = 50;\r\n\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n    var first_axis = keys[0];\r\n    var last_axis = keys[keys.length-1];\r\n\r\n    useEffect(()=>{\r\n\r\n        var hor = props.scatterHorizontal;\r\n        var ver = props.scatterVertical;\r\n\r\n        if(hor.horizon === \"None\" && ver.vert === \"None\"){\r\n            hor.horizon = first_axis;\r\n            ver.vert = last_axis;\r\n        }\r\n\r\n        const myNode = document.getElementById(\"cases-sub-scatterplot-vis-right-bot\");\r\n        if(myNode.firstChild)\r\n            myNode.removeChild(myNode.firstChild);\r\n\r\n        // append the svg object to the body of the page\r\n        var svg = d3.select(\"#cases-sub-scatterplot-vis-right-bot\")\r\n            .append(\"svg\")\r\n\r\n        // text label for the x axis\r\n        if(hor.horizon !== 'None') {\r\n            const text = d3.select(\"#cases-sub-scatterplot-vis-right-bot\").select(\"svg\").append(\"text\")\r\n            text.attr(\"transform\",\r\n                \"translate(\" + (35 + (width / 2)) + \" ,\" +\r\n                (height/2) + \")\")\r\n                .style(\"text-anchor\", \"middle\")\r\n                .text(hor.horizon);\r\n        }\r\n\r\n    },[props.scatterHorizontal, props.scatterVertical])\r\n\r\n    return (\r\n        <></>\r\n    )\r\n}\r\n\r\nexport const CasesScatterPlotLeftLabel = (props) => {\r\n\r\n    var margin = {top: 30, right: 30, bottom: 70, left: 80},\r\n        height = 360 - margin.top - margin.bottom,\r\n        width = 50;\r\n\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n    var first_axis = keys[0];\r\n    var last_axis = keys[keys.length-1];\r\n\r\n    useEffect(()=>{\r\n\r\n        var hor = props.scatterHorizontal;\r\n        var ver = props.scatterVertical;\r\n\r\n        if(hor.horizon === \"None\" && ver.vert === \"None\"){\r\n            hor.horizon = first_axis;\r\n            ver.vert = last_axis;\r\n        }\r\n\r\n        const myNode = document.getElementById(\"cases-sub-scatterplot-vis-left\");\r\n        if(myNode.firstChild)\r\n            myNode.removeChild(myNode.firstChild);\r\n\r\n        // append the svg object to the body of the page\r\n        var svg = d3.select(\"#cases-sub-scatterplot-vis-left\")\r\n            .append(\"svg\")\r\n            .attr(\"width\",width)\r\n            .attr(\"height\",height);;\r\n\r\n        // text label for the y axis\r\n        if(ver.vert !== 'None') {\r\n            d3.select(\"#cases-sub-scatterplot-vis-left\").select(\"svg\").append(\"text\")\r\n\r\n                .attr(\"transform\", \"translate( 30, \" + (height/2) + \") rotate(-90)\")\r\n                .style(\"text-anchor\", \"middle\")\r\n                .text(ver.vert);\r\n        }\r\n\r\n    },[props.scatterHorizontal, props.scatterVertical])\r\n\r\n    return (\r\n        <></>\r\n    )\r\n}\r\nexport default CasesScatterPlot;","import React, {useEffect} from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst ColorScale = (colorScheme) => {\r\n\r\n    var width_ = 40,\r\n        height_ = 410;\r\n\r\n    d3.select(\"#color-scheme-vis\").remove();\r\n\r\n    var svg = d3.select(\"#color-interpolator\")\r\n        .append(\"svg\")\r\n        .attr(\"id\", \"color-scheme-vis\")\r\n        .attr(\"width\", width_)\r\n        .attr(\"height\", height_)\r\n        .append(\"g\");\r\n\r\n    var colorScale = d3.scaleSequential(d3.interpolateInferno)\r\n        .domain([0, width_])\r\n\r\n    if(colorScheme === \"Inferno\" || colorScheme === undefined){\r\n        colorScale = d3.scaleSequential()\r\n            .interpolator(d3.interpolateInferno)\r\n            .domain([0, width_])\r\n    }\r\n    if(colorScheme === \"RdBu\"){\r\n        colorScale = d3.scaleSequential()\r\n            .interpolator(d3.interpolateRdBu)\r\n            .domain([0, width_])\r\n    }\r\n    else if(colorScheme === \"RdYlGn\"){\r\n        colorScale = d3.scaleSequential()\r\n            .interpolator(d3.interpolateRdYlGn)\r\n            .domain([0, width_])\r\n    }\r\n    else if(colorScheme === \"RdGy\"){\r\n        colorScale = d3.scaleSequential()\r\n            .interpolator(d3.interpolateRdGy)\r\n            .domain([0, width_])\r\n    }\r\n\r\n    var bars = svg.selectAll(\".bars\")\r\n        .data(d3.range(height_), function (d) {\r\n            return d;\r\n        })\r\n        .enter().append(\"rect\")\r\n        .attr(\"class\", \"bars\")\r\n        .attr(\"x\", function (d, i) {\r\n            return 0;\r\n        })\r\n        .attr(\"y\", function (d, i) {\r\n            return (10*i);\r\n        })\r\n        .attr(\"height\", 10)\r\n        .attr(\"width\", width_)\r\n        .style(\"fill\", function (d, i) {\r\n            return colorScale(d);\r\n        })\r\n}\r\n\r\nconst ColorInterpolationScale = (props) => {\r\n\r\n    useEffect(() => {\r\n        ColorScale(props.colorScheme);\r\n    }, [props.colorScheme])\r\n\r\n    return (\r\n        <div id=\"color-interpolator\"></div>\r\n    )\r\n}\r\nexport default ColorInterpolationScale;","import casesFactor from \"../Data/CasesFactors.json\";\r\nimport jsregression from \"js-regression\";\r\n\r\nconst minimums = {};\r\nconst maximums = {};\r\n\r\nlet keys = [];\r\nlet dimensions = [];\r\nlet modelWeights = {};\r\n\r\nif (casesFactor.length > 0) {\r\n    keys = Object.keys(casesFactor[0]);\r\n\r\n    dimensions = Object.keys(casesFactor[0]).filter(function (dimension) {\r\n        return dimension !== \"states\";\r\n    });\r\n\r\n    dimensions.forEach(function (dimension, index) {\r\n        minimums[dimension] = casesFactor[0][dimension];\r\n        maximums[dimension] = casesFactor[0][dimension];\r\n    })\r\n\r\n    casesFactor.map((factor) => {\r\n        dimensions.forEach(function (dimension, index) {\r\n            minimums[dimension] = Math.min(minimums[dimension], factor[dimension]);\r\n            maximums[dimension] = Math.max(maximums[dimension], factor[dimension]);\r\n        })\r\n    })\r\n\r\n    const regression = new jsregression.LinearRegression({\r\n        alpha: 0.0000000001, //\r\n        iterations: 300,\r\n        lambda: 0.0\r\n    });\r\n\r\n    const data = casesFactor.map(factor => {\r\n        return dimensions.map(dimension => {\r\n            return (factor[dimension] - minimums[dimension]) / (maximums[dimension] - minimums[dimension]);\r\n        });\r\n    });\r\n\r\n    const model = regression.fit(data);\r\n    dimensions.map((dimension, index) => {\r\n        modelWeights[dimension] = model.theta[index];\r\n    });\r\n}\r\n\r\nexport {\r\n    keys,\r\n    dimensions,\r\n    minimums,\r\n    maximums,\r\n    modelWeights\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport * as d3 from 'd3';\r\nimport casesFactor from \"./../../Data/CasesFactors.json\";\r\nimport MI from \"./../../Data/MutualInfo.json\";\r\nimport {CorrelationMatrix} from \"../../DataProcessing/CorrelationTable\";\r\nimport {dimensions, maximums, minimums, modelWeights} from \"../../DataProcessing/CasesFactors\";\r\n\r\nlet [labels, corrMat] = CorrelationMatrix(casesFactor);\r\n\r\nvar caseObj = {};\r\ncorrMat.forEach(function (item) {\r\n    if (item[\"x_feature\"] === \"cases\") {\r\n        caseObj[item[\"y_feature\"]] = item[\"coeff\"];\r\n    }\r\n});\r\n\r\nexport function OptAxes(corrSlider, corrThreshold, miSlider, miThreshold) {\r\n\r\n    var axesChosen = {};\r\n    if (corrSlider === false) {\r\n        for (var pos in caseObj) {\r\n            if (1 - Math.abs(caseObj[pos]) <= corrThreshold[\"corrThreshold\"]) { // && pos !== \"cases\") {\r\n                axesChosen[pos] = caseObj[pos];\r\n            }\r\n        }\r\n    } else if (miSlider === false) {\r\n        for (var pos in MI) {\r\n            if (MI[pos][\"mutualInfo\"] >= miThreshold[\"miThreshold\"]) {\r\n                axesChosen[MI[pos][\"label\"]] = MI[pos][\"mutualInfo\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (Object.keys(axesChosen).length < 2) {\r\n        return {};\r\n    }\r\n    return axesChosen;\r\n}\r\n\r\nexport default function CasesPCP(props) {\r\n\r\n    const side_margin = 30;\r\n    const cases_pcp_width = 1000 - 2 * side_margin;\r\n    const cases_pcp_height = 500 - 2 * side_margin;\r\n\r\n    var formatDecimalComma = d3.format(\",.2f\");\r\n\r\n    let wMax = Math.max.apply(null, (Object.values(modelWeights)).map(Math.abs));\r\n    let wMin = 0;\r\n\r\n    useEffect(() => {\r\n\r\n        var selectedAxesObj = props.selectedAxes;\r\n        var selectedAxes = Object.keys(selectedAxesObj);\r\n\r\n        d3.select(\"#cases-pcp-vis\").remove();\r\n        let svg = d3.select(\".cases-pcp-d3-wrapper\")\r\n            .append(\"svg\")\r\n            .attr(\"id\", \"cases-pcp-vis\")\r\n            .attr(\"width\", cases_pcp_width)\r\n            .attr(\"height\", cases_pcp_height + 100);\r\n\r\n        var y = {}\r\n        for (var i in dimensions) {\r\n            var name = dimensions[i];\r\n            y[name] = d3.scaleLinear()\r\n                .domain(d3.extent(casesFactor, function (d) {\r\n                    return +d[name];\r\n                }))\r\n                .range([cases_pcp_height, 0])\r\n        }\r\n\r\n        // const yScale = d3.scaleLinear()\r\n        //     .domain(dimensions.length)\r\n        //     .range([cases_pcp_height, 0]);\r\n\r\n        svg.selectAll('path').style('stroke', 'none');\r\n\r\n        var selectedAxisOrder = [];\r\n        // selectedAxes.filter(word => word !== \"cases\");\r\n\r\n        for (var i = 0; i < selectedAxes.length; i++) {\r\n            if (props.targetPlace === i) {\r\n                selectedAxisOrder.push(\"cases\");\r\n            }\r\n            if (selectedAxes[i] !== \"cases\")\r\n                selectedAxisOrder.push(selectedAxes[i]);\r\n        }\r\n\r\n\r\n//        console.log(selectedAxisOrder);\r\n        const xScale = d3.scaleBand()\r\n            .domain(selectedAxisOrder)\r\n            .range([0, cases_pcp_width])\r\n            .padding(0.5)\r\n\r\n        svg.selectAll()\r\n            .data(selectedAxisOrder, function (d) {\r\n                return d;\r\n            })\r\n            .enter()\r\n            .append('rect')\r\n            .style('fill', function (d) {\r\n                if (d === \"cases\") return 'orange';\r\n                return '#0d98ba';\r\n            })\r\n            .attr('x', (s) => xScale(s))\r\n            .attr('y', (s) => 0)\r\n            .attr('height', (s) => cases_pcp_height)\r\n            .attr('width', function (d) {\r\n                if (d === \"cases\") return 3 * (1 + selectedAxisOrder.length) / (selectedAxisOrder.length);\r\n                var scaledWeights = ((Math.abs(modelWeights[d]) - wMin) / (wMax - wMin));\r\n                return (3 + 15 * scaledWeights) * (1 + selectedAxisOrder.length) / (selectedAxisOrder.length);\r\n            });\r\n\r\n        //    console.log(selectedAxes);\r\n        svg.selectAll()\r\n            .data(selectedAxisOrder, function (d) {\r\n                return d;\r\n            })\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"transform\", function (d) {\r\n                return \"translate(\" + xScale(d) + \",\" + cases_pcp_height + \") rotate(90)\";\r\n            })\r\n            .append(\"text\")\r\n            .text(function (d) {\r\n                return d;\r\n            })\r\n            .style(\"fill\", \"black\")\r\n\r\n        svg.selectAll()\r\n            .data(selectedAxisOrder, function (d) {\r\n                return d;\r\n            })\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"transform\", function (d) {\r\n                return \"translate(\" + xScale(d) + \",\" + cases_pcp_height + \") rotate(90)\";\r\n            })\r\n            .append(\"text\")\r\n            .attr(\"y\", \"10px\")\r\n            .text(function (d) {\r\n                return formatDecimalComma(minimums[d]);\r\n            })\r\n            .style(\"font\", \"10px times\")\r\n            .style(\"fill\", \"#0d98ba\")\r\n\r\n        svg.selectAll()\r\n            .data(selectedAxisOrder, function (d) {\r\n                return d;\r\n            })\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"transform\", function (d) {\r\n                return \"translate(\" + xScale(d) + \",0) rotate(90)\";\r\n            })\r\n            .append(\"text\")\r\n            .attr(\"y\", \"10px\")\r\n            .text(function (d) {\r\n                return formatDecimalComma(maximums[d]);\r\n            })\r\n            .style(\"font\", \"10px times\")\r\n            .style(\"fill\", \"#0d98ba\")\r\n\r\n        // const curve = d3.line().curve(d3.curveNatural);\r\n\r\n        // The path function take a row of the csv as input, and return x and y coordinates of the line to draw for this raw.\r\n        function curve_path(d) {\r\n            return d3.line().curve(d3.curveCardinal)(selectedAxisOrder.map(function (p) {\r\n                return [xScale(p), y[p](d[p])];\r\n            }));\r\n        }\r\n\r\n        function line_path(d) {\r\n            return d3.line()(selectedAxisOrder.map(function (p) {\r\n                return [xScale(p), y[p](d[p])];\r\n            }));\r\n        }\r\n\r\n        svg.selectAll()\r\n            .data(casesFactor, function (d) {\r\n                return d;\r\n            })\r\n            .enter().append(\"path\")\r\n            .attr(\"d\", function (d) {\r\n                if (!(d.states in props.selectedData)) return line_path(d);\r\n                return curve_path(d);\r\n            })\r\n            .style(\"fill\", \"none\")\r\n            .style(\"stroke\", function (d) {\r\n                if (!(d.states in props.selectedData)) return \"#A2CCB6\";\r\n                return props.selectedData[d.states];\r\n            })\r\n            .style(\"stroke-width\", function (d) {\r\n                if (!(d.states in props.selectedData)) return '1px';\r\n                return '3px';\r\n            })\r\n\r\n    }, [props.selectedAxes, props.selectedData, props.targetPlace])\r\n\r\n    return (\r\n        <div className=\"cases-pcp-d3-wrapper\" width=\"800px\" height=\"500px\">\r\n        </div>\r\n    );\r\n\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {CorrelationMatrix} from \"../DataProcessing/CorrelationTable\";\r\nimport CasesMultiBrushes from \"./BrushOnTsne/CasesMultiBrushes\";\r\nimport casesFactor from \"../Data/CasesFactors.json\";\r\nimport {Slider} from \"rsuite\";\r\nimport CasesHeatMapViz from \"../SubPanels/CorrHeatMap/CasesHeatMap\";\r\nimport CasesScatterPlotViz, {CasesScatterPlotLeftLabel, CasesScatterPlotBottomLabel}\r\n    from \"../SubPanels/ScatterPlot/CasesScatterPlot\";\r\nimport ColorInterpolationScale from '../SubPanels/ColorInterpolationScale';\r\nimport CasesPCP, {OptAxes} from \"./D3Vis/CasesPCP\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport MutualInfo from './../Data/MutualInfo.json';\r\nimport MI from \"../Data/MutualInfo.json\";\r\nimport * as d3 from \"d3\";\r\n\r\nlet [labels, corrMat] = CorrelationMatrix(casesFactor);\r\n\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({length: count}, (v, k) => k).map(k => ({\r\n        id: `${labels[k]}`,\r\n        content: `${labels[k]}`,\r\n    }));\r\n\r\n\r\nvar caseObj = {};\r\ncorrMat.forEach(function (item) {\r\n    if (item[\"x_feature\"] === \"cases\") {\r\n        caseObj[item[\"y_feature\"]] = item[\"coeff\"];\r\n    }\r\n});\r\n\r\n// const handleStyle = {\r\n//     color: '#fff',\r\n//     fontSize: 12,\r\n//     width: 32,\r\n//     height: 22\r\n// };\r\n//\r\n// const ColorSelector = () => {\r\n//\r\n//     var width_ = 60,\r\n//         height_ = 30;\r\n//\r\n//     var svg = d3.select(\"#color-interpolation-scheme1\")\r\n//         .append(\"svg\")\r\n//         .attr(\"id\", \"color-scheme1\")\r\n//         .attr(\"width\", width_)\r\n//         .attr(\"height\", height_)\r\n//         .append(\"g\");\r\n//\r\n//     var colorScale = d3.scaleSequential(d3.interpolateInferno)\r\n//         .domain([0, width_])\r\n//\r\n//     var bars = svg.selectAll(\".bars\")\r\n//         .data(d3.range(width_), function (d) {\r\n//             return d;\r\n//         })\r\n//         .enter().append(\"rect\")\r\n//         .attr(\"class\", \"bars\")\r\n//         .attr(\"x\", function (d, i) {\r\n//             return i;\r\n//         })\r\n//         .attr(\"y\", 0)\r\n//         .attr(\"height\", height_)\r\n//         .attr(\"width\", 1)\r\n//         .style(\"fill\", function (d, i) {\r\n//             return colorScale(d);\r\n//         })\r\n//\r\n//     var svg2 = d3.select(\"#color-interpolation-scheme2\")\r\n//         .append(\"svg\")\r\n//         .attr(\"id\", \"color-scheme2\")\r\n//         .attr(\"width\", width_)\r\n//         .attr(\"height\", height_)\r\n//         .append(\"g\");\r\n//\r\n//     var colorScale2 = d3.scaleSequential(d3.interpolateRdBu)\r\n//         .domain([0, width_])\r\n//\r\n//     var bars2 = svg2.selectAll(\".bars\")\r\n//         .data(d3.range(width_), function (d) {\r\n//             return d;\r\n//         })\r\n//         .enter().append(\"rect\")\r\n//         .attr(\"class\", \"bars\")\r\n//         .attr(\"x\", function (d, i) {\r\n//             return i;\r\n//         })\r\n//         .attr(\"y\", 0)\r\n//         .attr(\"height\", height_)\r\n//         .attr(\"width\", 1)\r\n//         .style(\"fill\", function (d, i) {\r\n//             return colorScale2(d);\r\n//         })\r\n//\r\n//     var svg3 = d3.select(\"#color-interpolation-scheme3\")\r\n//         .append(\"svg\")\r\n//         .attr(\"id\", \"color-scheme3\")\r\n//         .attr(\"width\", width_)\r\n//         .attr(\"height\", height_)\r\n//         .append(\"g\");\r\n//\r\n//     var colorScale3 = d3.scaleSequential(d3.interpolateRdYlGn)\r\n//         .domain([0, width_])\r\n//\r\n//     var bars3 = svg3.selectAll(\".bars\")\r\n//         .data(d3.range(width_), function (d) {\r\n//             return d;\r\n//         })\r\n//         .enter().append(\"rect\")\r\n//         .attr(\"class\", \"bars\")\r\n//         .attr(\"x\", function (d, i) {\r\n//             return i;\r\n//         })\r\n//         .attr(\"y\", 0)\r\n//         .attr(\"height\", height_)\r\n//         .attr(\"width\", 1)\r\n//         .style(\"fill\", function (d, i) {\r\n//             return colorScale3(d);\r\n//         })\r\n//\r\n//     var svg4 = d3.select(\"#color-interpolation-scheme4\")\r\n//         .append(\"svg\")\r\n//         .attr(\"id\", \"color-scheme4\")\r\n//         .attr(\"width\", width_)\r\n//         .attr(\"height\", height_)\r\n//         .append(\"g\");\r\n//\r\n//     var colorScale4 = d3.scaleSequential(d3.interpolateRdGy)\r\n//         .domain([0, width_])\r\n//\r\n//     var bars4 = svg4.selectAll(\".bars\")\r\n//         .data(d3.range(width_), function (d) {\r\n//             return d;\r\n//         })\r\n//         .enter().append(\"rect\")\r\n//         .attr(\"class\", \"bars\")\r\n//         .attr(\"x\", function (d, i) {\r\n//             return i;\r\n//         })\r\n//         .attr(\"y\", 0)\r\n//         .attr(\"height\", height_)\r\n//         .attr(\"width\", 1)\r\n//         .style(\"fill\", function (d, i) {\r\n//             return colorScale4(d);\r\n//         })\r\n//\r\n// };\r\n\r\n// sliderPlace 0 to 1\r\nfunction getAxesOrderChange(selectedAxes, sliderPlace) {\r\n\r\n    var n = Object.keys(selectedAxes).length;\r\n    var target_pos = n - 1;\r\n    if (sliderPlace < 1 / (2 * (n - 1))) { // 0\r\n        target_pos = 0;\r\n    } else if (sliderPlace >= (2 * n - 3) / (2 * (n - 1))) { // (n-1)\r\n        target_pos = n - 1;\r\n    } else {\r\n        target_pos = Math.round(sliderPlace * (n - 1));\r\n    }\r\n    return target_pos;\r\n\r\n}\r\n\r\nconst mi_max = Math.max.apply(Math, MutualInfo.map(function (o) {\r\n    return o.mutualInfo\r\n}));\r\nconst mi_min = Math.min.apply(Math, MutualInfo.map(function (o) {\r\n    return o.mutualInfo\r\n}));\r\n\r\nexport default function CasesMain() {\r\n\r\n    const [items, setItems] = useState(getItems(labels.length));\r\n    const [corrThreshold, setCorrThreshold] = useState({\"corrThreshold\": 1});\r\n    const [miThreshold, setMiThreshold] = useState({\"miThreshold\": 1});\r\n    const [selectedData, setSelectedData] = useState({});\r\n    const [extractMethod, setExtractMethod] = useState({});\r\n    const [corrSlider, setCorrSlider] = useState(false);\r\n    const [miSlider, setMiSlider] = useState(true);\r\n    const [scatterHorizontal, setScatterHorizontal] = useState({\"horizon\": \"None\"});\r\n    const [scatterVertical, setScatterVertical] = useState({\"vert\": \"None\"});\r\n\r\n    const [selectedAxes, setSelectedAxes] = useState(caseObj);\r\n    const [colorScheme, setColorScheme] = useState('Inferno');\r\n    const [sliderPlace, setSliderPlace] = useState(1);\r\n    const [targetPlace, setTargetPlace] = useState(Object.keys(caseObj).length - 1);\r\n\r\n    const buttonStyle = {\r\n        color: \"#fff\",\r\n        fontSize: '10px',\r\n        backgroundColor: \"#5a6268\",\r\n        borderColor: \"#6c757d\",\r\n        width: \"100px\",\r\n        height: \"30px\"\r\n    };\r\n    var selectedAxesSubset = {};\r\n\r\n    useEffect(() => {\r\n\r\n        var axesSubset = {};\r\n\r\n        if (corrSlider === false) {\r\n            for (var key in caseObj) {\r\n                if (caseObj[key] <= corrThreshold[\"corrThreshold\"])\r\n                    axesSubset[key] = true;\r\n                else\r\n                    axesSubset[key] = false;\r\n            }\r\n        } else if (miSlider === false) {\r\n            for (var pos in MI) {\r\n                if (MI[pos][\"mutualInfo\"] <= miThreshold[\"miThreshold\"]) {\r\n                    axesSubset[MI[pos][\"label\"]] = true;\r\n                } else {\r\n                    axesSubset[MI[pos][\"label\"]] = false;\r\n                }\r\n            }\r\n        }\r\n        selectedAxesSubset = axesSubset;\r\n\r\n    }, [corrSlider, miSlider]);\r\n\r\n    return (\r\n        <div id=\"covid19-cases-wrapper\">\r\n            &nbsp;\r\n            <div id=\"cases-vis-brush-and-pcp\" style={{border: 'solid #F5F5F5'}}>\r\n                <div id=\"my-cases-vis-wrapper\">\r\n                    &nbsp;\r\n                    <div id=\"cases-pcp-wrapper\" style={{width: '1050px', height: '500px'}}>\r\n                        <b style={{height: '20px'}}> state-by-state variables</b>\r\n                        <CasesPCP selectedAxes={selectedAxes} selectedData={selectedData}\r\n                                  targetPlace={targetPlace}></CasesPCP>\r\n                    </div>\r\n\r\n                    <div id=\"cases-sub-multibrush\">\r\n                        <CasesMultiBrushes items={items} setSelectedData={setSelectedData}\r\n                                           setSelectedAxes={setSelectedAxes}></CasesMultiBrushes>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"cases-sub-wrapper\">\r\n                <div id=\"cases-interaction-board\"\r\n                     style={{marginLeft: '1.8rem', marginTop: '0.8rem', textAlign: 'left'}}>\r\n                    <div id=\"axis-order-slider-wrapper\" style={{height: '30px', width:'210px'}}>\r\n                        <b> \"Cases\" location in PC </b>\r\n                        <Slider\r\n                            min={0}\r\n                            max={1}\r\n                            step={0.01}\r\n                            defaultValue={1.0}\r\n                            onChange={v => {\r\n                                setSliderPlace(v);\r\n                                var target_pos = getAxesOrderChange(selectedAxes, v);\r\n                                if (target_pos !== targetPlace) {\r\n                                    setTargetPlace(target_pos);\r\n                                }\r\n                            }}\r\n                            style={{width: 200, marginTop: '0.3rem'}}/>\r\n                    </div>\r\n                    &nbsp;\r\n\r\n\r\n                    {/*<div id=\"cases-feature-extraction-slider\" style={{height: '90px'}}>*/}\r\n                    {/*</div>*/}\r\n\r\n                    <div id=\"selection-method-wrapper\" onChange={v => {\r\n                        setExtractMethod(v.target.value);\r\n                        if (v.target.value === \"correlation\") {\r\n                            setCorrSlider(false);\r\n                            setMiSlider(true);\r\n                        } else if (v.target.value === \"mutualInformation\") {\r\n                            setCorrSlider(true);\r\n                            setMiSlider(false);\r\n                        }\r\n                    }} style={{height: '100px'}}>\r\n                        <b> Selection Method </b>\r\n                        <div style={{height: '40px'}}>\r\n                            <input type=\"radio\" value=\"mutualInformation\" name=\"extract-method\"\r\n                                   style={{marginTop: '0.3rem'}}/>\r\n                            &nbsp; Mutual Information\r\n\r\n                            {/*<b> Mutual Information based selection </b>*/}\r\n\r\n                            <Slider\r\n                                min={mi_min}\r\n                                max={mi_max}\r\n                                step={0.01}\r\n                                defaultValue={1.0}\r\n                                onChange={v => {\r\n                                    setMiThreshold({miThreshold: v});\r\n                                }}\r\n                                disabled={miSlider}\r\n                                style={{width: 200, marginTop: '0.3rem'}}/>\r\n                        </div>\r\n                        <div style={{height: '40px'}}>\r\n                            <input type=\"radio\" value=\"correlation\" name=\"extract-method\" defaultChecked/>\r\n                            &nbsp; Correlation\r\n                            {/*<b> Correlation based selection </b>*/}\r\n                            <Slider\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.01}\r\n                                defaultValue={1.0}\r\n                                onChange={v => {\r\n                                    setCorrThreshold({corrThreshold: v});\r\n                                }}\r\n                                disabled={corrSlider}\r\n                                style={{width: 200, marginTop: '0.3rem'}}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div id=\"button-wrapper\">\r\n                        <div id=\"apply-button\" style={{height: '50px'}}>\r\n                            &nbsp;\r\n                            &nbsp;\r\n                            &nbsp;\r\n                            <Button\r\n                                variant=\"ui-primary\"\r\n                                onClick={() => {\r\n                                    var selected_axes = OptAxes(corrSlider, corrThreshold, miSlider, miThreshold);\r\n                                    setSelectedAxes(selected_axes);\r\n\r\n                                    var target_pos = getAxesOrderChange(selected_axes, sliderPlace);\r\n                                    if (target_pos !== targetPlace) {\r\n                                        setTargetPlace(target_pos);\r\n                                    }\r\n\r\n                                    if(Object.keys(selected_axes).length<=1){\r\n                                        setScatterHorizontal({horizon: \"None\"});\r\n                                        setScatterVertical({vert: \"None\"});\r\n                                    }\r\n\r\n                                }}\r\n                                style={buttonStyle}>\r\n                                Apply Selection\r\n                            </Button>\r\n                        </div>\r\n                        <div id=\"reset-button\" style={{height: '50px'}}>\r\n                            &nbsp;\r\n                            &nbsp;\r\n                            {/*<Button*/}\r\n                            {/*    variant=\"ui-primary\"*/}\r\n                            {/*    onClick={() => {*/}\r\n\r\n                            {/*        setCorrThreshold({\"corrThreshold\": 1});*/}\r\n                            {/*        setMiThreshold({\"miThreshold\": 1});*/}\r\n                            {/*        setSelectedData({});*/}\r\n                            {/*        setSelectedAxes(caseObj);*/}\r\n\r\n                            {/*    }}*/}\r\n                            {/*    style={buttonStyle}>*/}\r\n                            {/*    Reset*/}\r\n                            {/*</Button>*/}\r\n                        </div>\r\n                    </div>\r\n\r\n                    &nbsp;\r\n                    &nbsp;\r\n                    <div id=\"color-text-wrapper\">\r\n                        <b> Color for Heatmap </b>\r\n                    </div>\r\n                    <div id=\"cases-svg-interpolation-container\" style={{height: '120px'}} onChange={v => {\r\n                        setColorScheme(v.target.value);\r\n                    }}>\r\n\r\n                        <div>\r\n                            <input type=\"radio\" value=\"Inferno\" name=\"color-scheme\"/>\r\n                            &nbsp; Inferno\r\n                        </div>\r\n                        {/*<div id=\"color-interpolation-scheme1\"/>*/}\r\n\r\n                        <div>\r\n                            <input type=\"radio\" value=\"RdBu\" name=\"color-scheme\"/>\r\n                            &nbsp; RdBu\r\n                        </div>\r\n\r\n                        {/*<div id=\"color-interpolation-scheme2\"/>*/}\r\n                        <div>\r\n                            <input type=\"radio\" value=\"RdYlGn\" name=\"color-scheme\"/>\r\n                            &nbsp; RdYlGn\r\n                        </div>\r\n                        {/*<div id=\"color-interpolation-scheme3\"/>*/}\r\n\r\n                        <div>\r\n                            <input type=\"radio\" value=\"RdGy\" name=\"color-scheme\"/>\r\n                            &nbsp; RdGy\r\n                        </div>\r\n                        {/*<div id=\"color-interpolation-scheme4\"/>*/}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"cases-sub-heatmap\" id=\"cases-sub-heatmap-vis\">\r\n                    <CasesHeatMapViz setScatterHorizontal={setScatterHorizontal} setScatterVertical={setScatterVertical}\r\n                                     colorScheme={colorScheme} selectedAxes={selectedAxes}></CasesHeatMapViz>\r\n                </div>\r\n                <div id=\"color-scale-wrapper\">\r\n                    <ColorInterpolationScale colorScheme={colorScheme}></ColorInterpolationScale>\r\n                </div>\r\n                <div className=\"cases-sub-scatterplot\" id=\"cases-sub-scatterplot-vis\">\r\n                    <div className=\"cases-sub-scatterplot-left\" id=\"cases-sub-scatterplot-vis-left\">\r\n                        <CasesScatterPlotLeftLabel scatterHorizontal={scatterHorizontal}\r\n                                                   scatterVertical={scatterVertical}\r\n                                                   colorScheme={colorScheme}></CasesScatterPlotLeftLabel>\r\n                    </div>\r\n                    <div className=\"cases-sub-scatterplot-right\" id=\"cases-sub-scatterplot-vis-right\">\r\n                        <div className=\"cases-sub-scatterplot-right-top\" id=\"cases-sub-scatterplot-vis-right-top\">\r\n                            <CasesScatterPlotViz scatterHorizontal={scatterHorizontal}\r\n                                                 scatterVertical={scatterVertical}></CasesScatterPlotViz>\r\n                        </div>\r\n                        <div className=\"cases-sub-scatterplot-right-bot\" id=\"cases-sub-scatterplot-vis-right-bot\"\r\n                             style={{height: '50px'}}>\r\n                            <CasesScatterPlotBottomLabel scatterHorizontal={scatterHorizontal}\r\n                                                         scatterVertical={scatterVertical}></CasesScatterPlotBottomLabel>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {extend, Canvas} from 'react-three-fiber';\r\nimport {MeshLine, MeshLineMaterial} from 'three.meshline';\r\nimport deathsFactor from \"../Data/DeathsFactors.json\";\r\nimport * as THREE from \"three\";\r\nimport {CorrelationMatrix} from \"../DataProcessing/CorrelationTable\";\r\n\r\nextend({MeshLine, MeshLineMaterial})\r\n\r\nlet [labels, corrMat] = CorrelationMatrix(deathsFactor);\r\n\r\nvar caseObj = {};\r\ncorrMat.forEach(function (item) {\r\n    if (item[\"x_feature\"] === \"covid19\") {\r\n        caseObj[item[\"y_feature\"]] = item[\"coeff\"];\r\n    }\r\n\r\n});\r\n\r\nexport function CatMullRomCurveSculpting(points)\r\n{\r\n    //console.log(points);\r\n    var curvePointSet = [];\r\n\r\n    var pointLen = points.length;\r\n\r\n    // first\r\n    var first_point = {\r\n        _x: (2*points[0]._x - points[1]._x),\r\n        _y: (2*points[0]._y - points[1]._y),\r\n        _z: (2*points[0]._z - points[1]._z)\r\n    };\r\n    // last\r\n    var last_point = {\r\n        _x: (2 * points[pointLen - 1]._x - points[pointLen - 2]._x),\r\n        _y: (2 * points[pointLen - 1]._y - points[pointLen - 2]._y),\r\n        _z: (2 * points[pointLen - 1]._z - points[pointLen - 2]._z)\r\n    };\r\n\r\n    points.unshift(first_point);\r\n    points.push(last_point);\r\n    //console.log(points);\r\n\r\n    var quantization = 15;\r\n    for(var i=0; i<points.length-3; i++){\r\n        for(var j=0; j<quantization; j++) {\r\n            var t = j/quantization;\r\n            var x = 0.5* (2*points[i+1]._x + t*(-points[i]._x + points[i+2]._x) + t*t*(2*points[i]._x - 5 * points[i+1]._x + 4*points[i+2]._x - points[i+3]._x) + t*t*t*(-points[i]._x + 3*points[i+1]._x - 3*points[i+2]._x + points[i+3]._x));\r\n            var y = 0.5* (2*points[i+1]._y + t*(-points[i]._y + points[i+2]._y) + t*t*(2*points[i]._y - 5 * points[i+1]._y + 4*points[i+2]._y - points[i+3]._y) + t*t*t*(-points[i]._y + 3*points[i+1]._y - 3*points[i+2]._y + points[i+3]._y));\r\n            var z = 0.5* (2*points[i+1]._z + t*(-points[i]._z + points[i+2]._z) + t*t*(2*points[i]._z - 5 * points[i+1]._z + 4*points[i+2]._z - points[i+3]._z) + t*t*t*(-points[i]._z + 3*points[i+1]._z - 3*points[i+2]._z + points[i+3]._z));\r\n            curvePointSet.push(x, y, z);\r\n        }\r\n    }\r\n    // console.log(curvePointSet);\r\n    return curvePointSet;\r\n}\r\n\r\nexport function Line({points, width, color}) {\r\n\r\n    return (\r\n        <mesh>\r\n            <meshLine attach=\"geometry\" points={points}/>\r\n            <meshLineMaterial attach=\"material\"\r\n                              transparent\r\n                              depthTest={false}\r\n                              lineWidth={width}\r\n                              color={color}\r\n                // dashArray={0.}\r\n                // dashRatio={0.1}\r\n            />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nexport default function DeathsAxesLines(props) {\r\n    const [points, setPoints] = useState([]);\r\n    const [hPoints, setHPoints] = useState([]);\r\n    const [hCurve, setHCurve] = useState([]);\r\n    const [axes_, setAxes_] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        // console.log(props.corrThreshold);\r\n        var axesChosen = {};\r\n       // console.log(caseObj);\r\n        //console.log(props.corrThreshold[\"corrThreshold\"]);\r\n        for (var pos in caseObj) {\r\n            // console.log(pos, caseObj[pos]);\r\n            if ( 1 - Math.abs(caseObj[pos]) <= props.corrThreshold[\"corrThreshold\"]) {\r\n                //console.log(pos);\r\n                axesChosen[pos] = caseObj[pos];\r\n\r\n            }\r\n        }\r\n\r\n        // console.log(Object.keys(axesChosen));\r\n        // console.log(deathsFactor);\r\n\r\n        var minimums = {};\r\n        var maximums = {};\r\n        Object.keys(axesChosen).forEach(function (item, index) {\r\n            minimums[item] = (Math.min.apply(null, deathsFactor.map((v) => v[item])));\r\n            maximums[item] = (Math.max.apply(null, deathsFactor.map((v) => v[item])));\r\n        });\r\n\r\n\r\n        var selected_instance = {};\r\n        for (var i = 0; i < deathsFactor.length; i++) {\r\n            selected_instance[deathsFactor[i][\"state\"]] = false;\r\n        }\r\n\r\n        var dataChosen = props.selectedData;\r\n        Object.entries(dataChosen).forEach(entry => {\r\n            const [key, value] = entry;\r\n            selected_instance[key] = true;\r\n        });\r\n        //console.log(selected_instance);\r\n\r\n        var lineSet = [], hLineSet = [], controlPointSets = [];\r\n        var axesNums = Object.keys(axesChosen).length;\r\n        var left = -1, bottom = -0.90;\r\n        var right = 1, top = 0.90;\r\n        var side_margin = (right - left) * 0.05;\r\n        var drawing_width = right - left - (2 * side_margin);\r\n        var drawing_height = top - bottom;\r\n        var axesLineSet = [];\r\n        for (var i = 0; i < axesNums; i++) {\r\n            var axesPointSet = [];\r\n            var xtop = left + side_margin + drawing_width * (i / (axesNums - 1));\r\n            var ytop = top;\r\n            axesPointSet.push(xtop, ytop, 0);\r\n            var xbot = left + side_margin + drawing_width * (i / (axesNums - 1));\r\n            var ybot = bottom;\r\n            axesPointSet.push(xbot, ybot, 0);\r\n            axesLineSet.push(axesPointSet);\r\n        }\r\n        setAxes_(axesLineSet);\r\n        for (var i = 0; i < deathsFactor.length; i++) {\r\n            var pointSet = [], hPointSet = [];\r\n            if (selected_instance[deathsFactor[i][\"state\"]] === false) {\r\n                Object.keys(axesChosen).forEach(function (item, index) {\r\n                    var x = left + side_margin + drawing_width * (index / (axesNums - 1));\r\n                    var y = bottom + drawing_height * (deathsFactor[i][item] - minimums[item]) / (maximums[item] - minimums[item]);\r\n                    pointSet.push(x, y, 0);\r\n                });\r\n                lineSet.push(pointSet);\r\n            }\r\n            else{\r\n                var controlPointSet = [];\r\n                Object.keys(axesChosen).forEach(function (item, index) {\r\n                    var x = left + side_margin + drawing_width * (index / (axesNums - 1));\r\n                    var y = bottom + drawing_height * (deathsFactor[i][item] - minimums[item]) / (maximums[item] - minimums[item]);\r\n                    hPointSet.push(x, y, 0);\r\n                    var controlPoint = {\r\n                        _x: x,\r\n                        _y: y,\r\n                        _z: 0\r\n                    };\r\n                    controlPointSet.push(controlPoint);\r\n                });\r\n                controlPointSets.push(CatMullRomCurveSculpting(controlPointSet));\r\n                hLineSet.push(hPointSet);\r\n            }\r\n        }\r\n        setPoints(lineSet);\r\n        setHPoints(hLineSet);\r\n        setHCurve(controlPointSets);\r\n    }, [props.selectedAxes, props.items, props.corrThreshold, props.selectedData]);\r\n\r\n\r\n    return (\r\n        <Canvas style={{width: '600px', height: '400px'}}\r\n                camera={{\r\n                    isOrthographicCamera: true,\r\n                    position: [0, 0, 1],\r\n                    fov: 90,\r\n                    aspect: 1,\r\n                    near: 0.1,\r\n                    far: 1000,\r\n                    up: [0, 1, 0]\r\n                }}\r\n        >\r\n            {axes_.map((value, index) => {\r\n                // EE786E\r\n                return <Line key={\"cormo-axis-\"+index} points={value} width={0.007} color={'#e0feff'}></Line>\r\n            })}\r\n            {points.map((value, index) => {\r\n                return <Line key={index} points={value} width={0.005} color={'#A2CCB6'}></Line>\r\n            })}\r\n            {/*{hPoints.map((value, index) => {*/}\r\n            {/*    return <Line points={value} width={0.015} color={'#FCEEB5'}></Line>*/}\r\n            {/*})}*/}\r\n            {hCurve.map((value, index) => {\r\n                return <Line key={\"curve\"+index} points={value} width={0.01} color={'#FCEEB5'}></Line>\r\n            })}\r\n        </Canvas>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {CorrelationMatrix} from \"../DataProcessing/CorrelationTable\";\r\nimport deathsFactor from \"../Data/DeathsFactors.json\";\r\n\r\nlet [labels, corrMat] = CorrelationMatrix(deathsFactor);\r\n\r\nvar caseObj = {};\r\ncorrMat.forEach(function (item) {\r\n    if (item[\"x_feature\"] === \"covid19\") {\r\n        caseObj[item[\"y_feature\"]] = item[\"coeff\"];\r\n    }\r\n});\r\n\r\nexport default function ParallelLabels(props) {\r\n    const [displayLabels, setDisplayLabels] = useState([]);\r\n    const [labelMargin,setLabelMargin] = useState(0);\r\n\r\n    useEffect(() => {\r\n        //displayLabels = [];\r\n        var labels = []\r\n        var axesChosen = {};\r\n        for (var pos in caseObj) {\r\n            if ( 1 - Math.abs(caseObj[pos]) < props.corrThreshold[\"corrThreshold\"]) {\r\n                axesChosen[pos] = caseObj[pos];\r\n            }\r\n        }\r\n        var nums = (Object.keys(axesChosen).length);\r\n        var side_margin = 30;\r\n        var canvas_width = 600;\r\n        var span =0;\r\n        if(nums!=1) {\r\n            span = (canvas_width - (2 * side_margin)) / (nums - 1);\r\n        }\r\n        else{\r\n            span = (canvas_width - (2 * side_margin)) / (nums);\r\n        }\r\n        setLabelMargin(-span + side_margin);\r\n        var text_margin = 0;\r\n        var idx = 0;\r\n        for (var label in axesChosen) {\r\n            /*width:side_margin + span*idx*/\r\n            labels.push(<p key={label} style={{marginLeft:-{span}+'px', width:span, writingMode: 'vertical-rl',  textOrientation: 'mixed', textAlign:'left', fontFamily:'Helvetica'}}>{label}</p>);\r\n            idx = idx +1;\r\n        }\r\n        setDisplayLabels(labels);\r\n    }, [props.corrThreshold]);\r\n\r\n    return (\r\n        <div style={{display:'flex', transform: 'translate('+labelMargin+'px, 0)'}}>\r\n            {displayLabels}\r\n        </div>\r\n    )\r\n\r\n};","import React from 'react';\r\nimport PearsonCorrCoeff from \"./PearsonCorrCoeff.js\";\r\nimport deaths_factor from '../Data/DeathsFactors.json';\r\n\r\nexport const CovidDeathsCorrelationMatrix = (features) => {\r\n\r\n    var disease_keys = Object.keys(features[0]);\r\n    disease_keys.shift();\r\n\r\n    var data = [];\r\n    disease_keys.forEach(function(key){\r\n        var feature = [];\r\n        features.forEach(function(data){feature.push(data[key]);})\r\n        data.push(feature);\r\n    })\r\n\r\n    let corrMat = [];\r\n    for(let i=0; i<disease_keys.length; i++){\r\n        let corr =[];\r\n        for(let j=0; j<disease_keys.length; j++){\r\n            let corr2 = {};\r\n            corr.push((PearsonCorrCoeff(data[i], data[j])).toFixed(2));\r\n            corr2[\"coeff\"] = +(PearsonCorrCoeff(data[i], data[j])).toFixed(2);\r\n            corr2[\"x_feature\"] = disease_keys[i];\r\n            corr2[\"y_feature\"] = disease_keys[j];\r\n            corrMat.push(corr2);\r\n        }\r\n    }\r\n    return [disease_keys, corrMat];\r\n}\r\n\r\nconst DeathsCorrelationTable = (props) => {\r\n\r\n    // const {id} = props;\r\n    //const id = props.id;\r\n    // console.log(id);\r\n\r\n    let [labels, corrMat] = CovidDeathsCorrelationMatrix(deaths_factor);\r\n    let corrTable = [];\r\n\r\n    let tableHeader = [];\r\n    let hChildren = [];\r\n    for(let i=0; i<labels.length; i++){\r\n        if(i===0)\r\n            hChildren.push(<th key={\"cormo-header-\"+ i}>{\" \"}</th>);\r\n        hChildren.push(<th key={\"cormo-\"+labels[i]}>{labels[i]}</th>);\r\n        //console.log(labels[i]);\r\n    }\r\n    tableHeader.push(<thead key=\"cormo-table-header\"><tr key=\"cormobities\">{hChildren}</tr></thead>);\r\n\r\n    let tableBody = [];\r\n    let bParent = [];\r\n\r\n    let label_length = labels.length;\r\n    let bChild = [];\r\n    let idx = 0;\r\n    for(let i=0; i<corrMat.length; i++){\r\n        if(i%label_length === 0){\r\n            bChild = [];\r\n            bChild.push(<td key={\"cormo-label-\"+idx}><b>{labels[idx++]}</b></td>);\r\n        }\r\n        bChild.push(<td key={\"cormo-corr-\"+i}>{corrMat[i][\"coeff\"]}</td>);\r\n        if(i%label_length === label_length -1 ){\r\n            bParent.push(<tr key={\"cormo-\"+i+\"th-row-\"+(i%label_length)+\"th-col\"}>{bChild}</tr>);\r\n        }\r\n    }\r\n    tableBody.push(<tbody key=\"cormo-table-body\">{bParent}</tbody>);\r\n    corrTable.push(tableHeader);\r\n    corrTable.push(tableBody);\r\n\r\n    return corrTable;\r\n}\r\n\r\nexport default DeathsCorrelationTable;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {extend, Canvas} from 'react-three-fiber';\r\nimport {MeshLine, MeshLineMaterial} from 'three.meshline';\r\nimport casesFactor from \"../Data/CasesFactors.json\";\r\nimport * as THREE from \"three\";\r\nimport {CorrelationMatrix} from \"../DataProcessing/CorrelationTable\";\r\nimport MI from '../Data/MutualInfo.json';\r\nimport MutualInfo from \"../Data/MutualInfo.json\";\r\nimport jsregression from \"js-regression\";\r\n\r\nextend({MeshLine, MeshLineMaterial})\r\n\r\nlet [labels, corrMat] = CorrelationMatrix(casesFactor);\r\n\r\nvar caseObj = {};\r\ncorrMat.forEach(function (item) {\r\n    if (item[\"x_feature\"] === \"cases\") {\r\n        caseObj[item[\"y_feature\"]] = item[\"coeff\"];\r\n    }\r\n\r\n});\r\n\r\nexport function CatMullRomCurveSculpting(points) {\r\n    //console.log(points);\r\n    var curvePointSet = [];\r\n\r\n    var pointLen = points.length;\r\n    if (pointLen < 2) {\r\n        return curvePointSet;\r\n    }\r\n\r\n    // first\r\n    var first_point = {\r\n        _x: (2 * points[0]._x - points[1]._x),\r\n        _y: (2 * points[0]._y - points[1]._y),\r\n        _z: (2 * points[0]._z - points[1]._z)\r\n    };\r\n    // last\r\n    var last_point = {\r\n        _x: (2 * points[pointLen - 1]._x - points[pointLen - 2]._x),\r\n        _y: (2 * points[pointLen - 1]._y - points[pointLen - 2]._y),\r\n        _z: (2 * points[pointLen - 1]._z - points[pointLen - 2]._z)\r\n    };\r\n\r\n    points.unshift(first_point);\r\n    points.push(last_point);\r\n\r\n    var quantization = 15;\r\n    for (var i = 0; i < points.length - 3; i++) {\r\n        for (var j = 0; j < quantization; j++) {\r\n            var t = j / quantization;\r\n            var x = 0.5 * (2 * points[i + 1]._x + t * (-points[i]._x + points[i + 2]._x) + t * t * (2 * points[i]._x - 5 * points[i + 1]._x + 4 * points[i + 2]._x - points[i + 3]._x) + t * t * t * (-points[i]._x + 3 * points[i + 1]._x - 3 * points[i + 2]._x + points[i + 3]._x));\r\n            var y = 0.5 * (2 * points[i + 1]._y + t * (-points[i]._y + points[i + 2]._y) + t * t * (2 * points[i]._y - 5 * points[i + 1]._y + 4 * points[i + 2]._y - points[i + 3]._y) + t * t * t * (-points[i]._y + 3 * points[i + 1]._y - 3 * points[i + 2]._y + points[i + 3]._y));\r\n            var z = 0.5 * (2 * points[i + 1]._z + t * (-points[i]._z + points[i + 2]._z) + t * t * (2 * points[i]._z - 5 * points[i + 1]._z + 4 * points[i + 2]._z - points[i + 3]._z) + t * t * t * (-points[i]._z + 3 * points[i + 1]._z - 3 * points[i + 2]._z + points[i + 3]._z));\r\n            curvePointSet.push(x, y, z);\r\n        }\r\n    }\r\n    return curvePointSet;\r\n}\r\n\r\nexport function Line({points, width, color}) {\r\n\r\n    return (\r\n        <mesh>\r\n            <meshLine attach=\"geometry\" points={points}/>\r\n            <meshLineMaterial attach=\"material\"\r\n                              transparent\r\n                              depthTest={false}\r\n                              lineWidth={width}\r\n                              color={color}\r\n                // opacity={0.3}\r\n                // dashArray={0.}\r\n                // dashRatio={0.1}\r\n            />\r\n\r\n        </mesh>\r\n    )\r\n}\r\n\r\nexport const linearRegressionWeights = (axesChosen, threshold) => {\r\n\r\n    var minimums = {};\r\n    var maximums = {};\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n    Object.keys(keys).forEach(function (item, index) {\r\n        minimums[keys[item]] = (Math.min.apply(null, casesFactor.map((v) => v[keys[item]])));\r\n        maximums[keys[item]] = (Math.max.apply(null, casesFactor.map((v) => v[keys[item]])));\r\n    });\r\n\r\n    var data = casesFactor.map(r => {\r\n\r\n        var copy_r = Object.assign({}, r);\r\n        delete copy_r.states;\r\n\r\n        // var chosen = {};\r\n        // if (axesChosen !== undefined && threshold !== 1) {\r\n        //     for (const [key, value] of Object.entries(axesChosen)) {\r\n        //         chosen[key] = ((copy_r[key] - minimums[key]) / (maximums[key] - minimums[key]));\r\n        //     }\r\n        //     chosen[\"cases\"] = ((copy_r[\"cases\"] - minimums[\"cases\"]) / (maximums[\"cases\"] - minimums[\"cases\"]));\r\n        //     return Object.values(chosen);\r\n        // } else {\r\n            for (const [key, value] of Object.entries(copy_r)) {\r\n                copy_r[key] = ((value - minimums[key]) / (maximums[key] - minimums[key]));\r\n            }\r\n            return Object.values(copy_r);\r\n        // }\r\n    });\r\n\r\n    // === Create the linear regression === //\r\n    var regression = new jsregression.LinearRegression({\r\n        alpha: 0.0000000001, //\r\n        iterations: 300,\r\n        lambda: 0.0\r\n    });\r\n\r\n    // === Train the linear regression === //\r\n    var model = regression.fit(data);\r\n    // === Print the trained model === //\r\n    //setWeights(w);\r\n    // console.log(model);\r\n\r\n    var modelTheta = {};\r\n    Object.keys(model.theta).forEach(function (item, index) {\r\n        modelTheta[keys[item]] = model.theta[index];\r\n    });\r\n\r\n    return [modelTheta, axesChosen];\r\n};\r\n\r\nexport function ChooseAxes(corrSlider, corrThreshold, miSlider, miThreshold) {\r\n\r\n    var axesChosen = {};\r\n    if (corrSlider === false) {\r\n        for (var pos in caseObj) {\r\n            //console.log(pos, Math.abs(caseObj[pos]));\r\n            if (1 - Math.abs(caseObj[pos]) <= corrThreshold[\"corrThreshold\"]){ // && pos !== \"cases\") {\r\n                axesChosen[pos] = caseObj[pos];\r\n            }\r\n        }\r\n    } else if (miSlider === false) {\r\n        var mi_max = Math.max.apply(Math, MutualInfo.map(function (o) {\r\n            return o.mutualInfo\r\n        }));\r\n        for (var pos in MI) {\r\n            if (MI[pos][\"mutualInfo\"] >= miThreshold[\"miThreshold\"]) {\r\n                axesChosen[MI[pos][\"label\"]] = MI[pos][\"mutualInfo\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (+(Object.keys(axesChosen).length) < 2) {\r\n        return {};\r\n    }\r\n    return axesChosen;\r\n}\r\n\r\nfunction InstanceSet(selectedData) {\r\n\r\n    var selected_instance = {};\r\n    for (var i = 0; i < casesFactor.length; i++) {\r\n        selected_instance[casesFactor[i][\"states\"]] = false;\r\n    }\r\n    var dataChosen = selectedData;\r\n    Object.entries(dataChosen).forEach(entry => {\r\n        const [key, value] = entry;\r\n        selected_instance[key] = value; // selected data\r\n        //selected_instance[key] = true; // selected data\r\n    });\r\n    return selected_instance;\r\n}\r\n\r\nexport function AxesNumericalRange(data, axesChosen) {\r\n    var minimums = {};\r\n    var maximums = {};\r\n    Object.keys(axesChosen).forEach(function (item, index) {\r\n        minimums[item] = (Math.min.apply(null, data.map((v) => v[item])));\r\n        maximums[item] = (Math.max.apply(null, data.map((v) => v[item])));\r\n    });\r\n    return [minimums, maximums];\r\n}\r\n\r\nexport function ComputeVerticesPos(axesChosen, selectedData) {\r\n    var axes = [], vertices = [], hLineSet = [], hVertices = [], hColors=[], weightPos = [];\r\n\r\n    var minimums = {}, maximums = {};\r\n    [minimums, maximums] = AxesNumericalRange(casesFactor, axesChosen);\r\n\r\n    var selected_instance = InstanceSet(selectedData);\r\n    var axesNums = Object.keys(axesChosen).length;\r\n    var left = -1, bottom = -0.90;\r\n    var right = 1, top = 0.90;\r\n    var side_margin = (right - left) * 0.05;\r\n    var drawing_width = right - left - (2 * side_margin);\r\n    var drawing_height = top - bottom;\r\n\r\n    for (var i = 0; i < axesNums; i++) {\r\n        var axesPointSet = [];\r\n        var xtop = left + side_margin + drawing_width * (i / (axesNums - 1));\r\n        var ytop = top;\r\n        axesPointSet.push(xtop, ytop, 0);\r\n        var xbot = left + side_margin + drawing_width * (i / (axesNums - 1));\r\n        var ybot = bottom;\r\n        axesPointSet.push(xbot, ybot, 0);\r\n        axes.push(axesPointSet);\r\n    }\r\n\r\n    // polylines\r\n    for (var i = 0; i < casesFactor.length; i++) {\r\n        var pointSet = [], hPointSet = [];\r\n       // console.log(axesChosen);\r\n        if (selected_instance[casesFactor[i][\"states\"]] === false) {\r\n            Object.keys(axesChosen).forEach(function (item, index) {\r\n               // console.log(item);\r\n                var x = left + side_margin + drawing_width * (index / (axesNums - 1));\r\n                var y = bottom + drawing_height * (casesFactor[i][item] - minimums[item]) / (maximums[item] - minimums[item]);\r\n                pointSet.push(x, y, 0);\r\n            });\r\n            vertices.push(pointSet);\r\n        } else {\r\n            var controlPointSet = [];\r\n            //console.log(selected_instance[casesFactor[i][\"states\"]]);\r\n            Object.keys(axesChosen).forEach(function (item, index) {\r\n\r\n                var x = left + side_margin + drawing_width * (index / (axesNums - 1));\r\n                var y = bottom + drawing_height * (casesFactor[i][item] - minimums[item]) / (maximums[item] - minimums[item]);\r\n                hPointSet.push(x, y, 0);\r\n                var controlPoint = {\r\n                    _x: x,\r\n                    _y: y,\r\n                    _z: 0\r\n                };\r\n                controlPointSet.push(controlPoint);\r\n            });\r\n\r\n            hVertices.push(CatMullRomCurveSculpting(controlPointSet));\r\n            hLineSet.push(hPointSet);\r\n            hColors.push(selected_instance[casesFactor[i][\"states\"]]);\r\n        }\r\n    }\r\n\r\n    for (var idx = 0; idx < axesNums; idx++) {\r\n        var x = left + side_margin + drawing_width * (idx / (axesNums - 1));\r\n        var y = bottom;\r\n        weightPos.push([x, y, 0]);\r\n    }\r\n\r\n    //console.log(vertices);\r\n    return [axes, vertices, hLineSet, hVertices, hColors, weightPos];\r\n\r\n}\r\n\r\nexport function Parallel_Lines(corrSlider, corrThreshold, miSlider, miThreshold, selectedData) {\r\n\r\n    var axesChosen = ChooseAxes(corrSlider, corrThreshold, miSlider, miThreshold);\r\n    var axesNums = Object.keys(axesChosen).length;\r\n\r\n    var threshold = corrThreshold;\r\n    var [weights, resultAxesChosen] = linearRegressionWeights(axesChosen, corrThreshold);\r\n    var modelWeights = {};\r\n\r\n    Object.keys(axesChosen).forEach(function (item, index) {\r\n        modelWeights[item] = weights[item];\r\n    });\r\n\r\n    var mi = [];\r\n    Object.keys(axesChosen).forEach(function (item, index) {\r\n        const nmi = require('normalized-mutual-information');\r\n        let ax1 = [];\r\n        let ax2 = [];\r\n        for (var i = 0; i < casesFactor.length; i++) {\r\n            ax1.push(casesFactor[i][item]);\r\n            ax2.push(casesFactor[i]['cases']);\r\n        }\r\n        var ax1min = Math.min.apply(null, ax1);\r\n        var ax1max = Math.max.apply(null, ax1);\r\n        var ax2min = Math.min.apply(null, ax2);\r\n        var ax2max = Math.max.apply(null, ax2);\r\n        var nAx1 = [];\r\n        var nAx2 = [];\r\n        for (var i = 0; i < casesFactor.length; i++) {\r\n            if (ax1max === ax1min)\r\n                nAx1.push(0);\r\n            else\r\n                nAx1.push((ax1[i] - ax1min) / (ax1max - ax1min));\r\n            if (ax2max === ax2min)\r\n                nAx2.push(0);\r\n            else\r\n                nAx2.push((ax2[i] - ax2min) / (ax2max - ax2min));\r\n        }\r\n    });\r\n\r\n    var axes = [], vertices = [], hLineSet = [], hVertices = [], hColors=[], weightPos = [];\r\n\r\n    if (axesNums >= 2) {\r\n        [axes, vertices, hLineSet, hVertices, hColors, weightPos] = ComputeVerticesPos(axesChosen, selectedData)\r\n    }\r\n\r\n    return {axes, vertices, hVertices, hColors, weightPos, modelWeights, mi, hLineSet};\r\n}\r\n\r\nexport default function CasesParallelCoordinates(props) {\r\n\r\n    const {axes, vertices, hVertices, hColors, weightPos, modelWeights, mutual_info, hPoints} = props;\r\n    //  console.log(modelWeights);\r\n    var arr = Object.values(modelWeights);\r\n    let wMax = Math.max.apply(null, arr.map(Math.abs));\r\n    let wMin = 0;\r\n\r\n    console.log(wMax);\r\n    // let wMin = Math.min(...arr);\r\n    // let wMax = Math.max(...arr);\r\n    // console.log(vertices, hVertices, axes);\r\n\r\n    return (\r\n        <Canvas id=\"pcp-canvas\"\r\n                context=\"2d\"\r\n                style={{width: '800px', height: '400px', background: 'black'}}\r\n                camera={{\r\n                    isOrthographicCamera: true,\r\n                    position: [0, 0, 1],\r\n                    fov: 90,\r\n                    aspect: 1,\r\n                    near: 0.1,\r\n                    far: 100,\r\n                    up: [0, 1, 0]\r\n                }}\r\n        >\r\n\r\n            {/*{weightPos.map((value, index)=> {*/}\r\n            {/*    return (*/}\r\n            {/*        <mesh key={\"weight-pos-\" + index} position={value}>*/}\r\n            {/*            <torusBufferGeometry attach=\"geometry\" args={[0.01, 0.02, 16, 10]}/>*/}\r\n            {/*            <meshBasicMaterial attach=\"material\" color={0xfff1ef}/>*/}\r\n            {/*        </mesh>*/}\r\n            {/*    );*/}\r\n            {/*})}*/}\r\n\r\n            {\r\n                axes.map((value, index) => {\r\n                    var scaledWeights = ((Math.abs(arr[index]) - wMin) / (wMax - wMin));\r\n\r\n                    if (axes.length === (index + 1))\r\n                        return <Line key={\"axis-\" + index} points={value} width={0.02} color={'#e0fe3f'}\r\n                                     opacity={0.01}/>\r\n                    else\r\n                        return <Line key={\"axis-\" + index} points={value} width={0.003 + 0.05 * scaledWeights}\r\n                                     color={'#0d98ba'}/>\r\n                })\r\n            }\r\n            {vertices.map((value, index) => {\r\n             //   console.log(value);\r\n                return <Line key={index} points={value} width={0.005} color={'#A2CCB6'}/>\r\n            })}\r\n            {hVertices.map((value, index) => {\r\n                return <Line key={\"curve-\" + index} points={value} width={0.006} color={hColors[index]}/>\r\n            })}\r\n        </Canvas>\r\n    )\r\n}\r\n//return <Line key={\"curve-\" + index} points={value} width={0.006} color={'#FCEEB5'}/>\r\n/*\r\n {/*{hPoints.map((value, index) => {\r\n    return <Line points={value} width={0.015} color={'#FCEEB5'}></Line>\r\n})}*/\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CorrelationMatrix} from \"../DataProcessing/CorrelationTable\";\r\nimport casesFactor from \"../Data/CasesFactors.json\";\r\nimport MI from \"../Data/MutualInfo.json\";\r\nimport MutualInfo from \"../Data/MutualInfo.json\";\r\nimport {AxesNumericalRange} from \"./CasesParallelCoordinates\";\r\n\r\nlet [labels, corrMat] = CorrelationMatrix(casesFactor);\r\n\r\nvar caseObj = {};\r\ncorrMat.forEach(function (item) {\r\n    if (item[\"x_feature\"] === \"cases\") {\r\n        caseObj[item[\"y_feature\"]] = item[\"coeff\"];\r\n    }\r\n});\r\n\r\nexport function Parallel_Labels(corrSlider, corrThreshold, miSlider, miThreshold){\r\n    var axes_labels = []\r\n    var axesChosen = {};\r\n    if(corrSlider === false) {\r\n        for (var pos in caseObj) {\r\n            if (1 - Math.abs(caseObj[pos]) <= corrThreshold[\"corrThreshold\"]) {\r\n                axesChosen[pos] = caseObj[pos];\r\n            }\r\n        }\r\n    }\r\n    else if(miSlider === false){\r\n        var mi_max = Math.max.apply(Math, MutualInfo.map(function(o) {return o.mutualInfo}));\r\n        for (var pos in MI) {\r\n            if (MI[pos][\"mutualInfo\"] >= miThreshold[\"miThreshold\"]) {\r\n                axesChosen[MI[pos][\"label\"]] = MI[pos][\"mutualInfo\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    var nums = (Object.keys(axesChosen).length);\r\n    var side_margin = 30;\r\n    var canvas_width = 800;\r\n    var span =0;\r\n    if(nums!=1) {\r\n        span = (canvas_width - (2 * side_margin)) / (nums - 1);\r\n    }\r\n    else{\r\n        span = (canvas_width - (2 * side_margin)) / (nums);\r\n    }\r\n    // setLabelMargin(-span + side_margin);\r\n    var label_margin = -span + side_margin;\r\n    var text_margin = 0;\r\n    var idx = 0;\r\n    for (var label in axesChosen) {\r\n        /*width:side_margin + span*idx*/\r\n        axes_labels.push(<p key={label} style={{marginLeft:-{span}+'px', width:span, writingMode: 'vertical-rl',  textOrientation: 'mixed', textAlign:'left', fontFamily:'Helvetica'}}>{label}</p>);\r\n        idx = idx +1;\r\n    }\r\n\r\n    var [axes_minimums, axes_maximums] = AxesNumericalRange(casesFactor, axesChosen);\r\n\r\n    var axesMins = Object.values(axes_minimums);\r\n    var axesMaxs = Object.values(axes_maximums);\r\n\r\n    axesMins.map(a=> {a.toFixed(2)});\r\n    axesMaxs.map(a=> {a.toFixed(2)});\r\n\r\n    // console.log(axesMins,  axesMaxs);\r\n    // setDisplayLabels(labels);\r\n    if(axes_labels.length<=1){\r\n        axes_labels = [];\r\n        axesMins = [];\r\n        axesMaxs = [];\r\n    }\r\n    return {label_margin, axes_labels, axesMins, axesMaxs};\r\n}\r\n\r\nexport default function CasesPCPLabels(props) {\r\n\r\n    const {label_margin, axes_labels, axesMins, axesMaxs} = props;\r\n   // console.log(label_margin, axes_labels, axesMins, axesMaxs);\r\n    return (\r\n            <div style={{display:'flex', fontSize:'13px', transform: 'translate('+label_margin+'px, 0)'}}>\r\n                {axes_labels}\r\n            </div>\r\n    )\r\n};\r\n\r\nexport function CasesMinLabel(props){\r\n\r\n    const {label_margin, axes_labels, axesMins, axesMaxs} = props;\r\n\r\n    //console.log(axes_labels);\r\n    console.log(label_margin, axes_labels, axesMins, axesMaxs);\r\n    return (\r\n        <div style={{display:'flex', fontSize:'13px', transform: 'translate('+label_margin+'px, 0)'}}>\r\n            {axesMins}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport function CasesMaxLabel(props){\r\n\r\n    const {label_margin, axes_labels, axesMins, axesMaxs} = props;\r\n\r\n    return (\r\n        <div style={{display:'flex', fontSize:'13px', transform: 'translate('+label_margin+'px, 0)'}}>\r\n            {axesMaxs}\r\n        </div>\r\n    )\r\n}","import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport {scaleBand} from 'd3-scale';\r\nimport casesFactor from './../../Data/CasesFactors.json';\r\nimport calculateCorrelation from 'calculate-correlation';\r\n\r\nvar data = [];\r\n\r\nconst correlation = (casesFactor) => {\r\n\r\n    if(data.length > 0) return data;\r\n\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n\r\n    for(var idx =0; idx<keys.length; idx++) {\r\n        for(var jdx =0; jdx<keys.length; jdx++) {\r\n            let data1 = [];\r\n            let data2 = [];\r\n            Object.keys(casesFactor).forEach(function (key) {\r\n                let elem = {};\r\n                data1.push(casesFactor[key][keys[idx]]);\r\n                data2.push(casesFactor[key][keys[jdx]]);\r\n                // data[keys[idx]+'&'+keys[idx+1]] = calc_pearson_corr(data1, data2) ;\r\n                elem['group'] = keys[idx];\r\n                elem['variable'] = keys[jdx];\r\n                elem['value'] = calc_pearson_corr(data1, data2);\r\n                data.push(elem);\r\n            });\r\n        }\r\n    }\r\n\r\n    return data;\r\n\r\n};\r\n\r\nconst calc_pearson_corr = (data1, data2) => {\r\n    return calculateCorrelation(data1, data2);\r\n};\r\n\r\nconst colorSelector = () => {\r\n\r\n    var width_ = 60,\r\n        height_ = 30;\r\n\r\n    var svg = d3.select(\"#deaths-svg-interpolation-container\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", width_)\r\n        .attr(\"height\", height_)\r\n        .append(\"g\");\r\n\r\n    var colorScale = d3.scaleSequential(d3.interpolateInferno)\r\n        .domain([0, width_])\r\n\r\n    var bars = svg.selectAll(\".bars\")\r\n        .data(d3.range(width_), function(d) { return d; })\r\n        .enter().append(\"rect\")\r\n        .attr(\"class\", \"bars\")\r\n        .attr(\"x\", function(d, i) { return i; })\r\n        .attr(\"y\", 0)\r\n        .attr(\"height\", height_)\r\n        .attr(\"width\", 1)\r\n        .style(\"fill\", function(d, i ) { return colorScale(d); })\r\n\r\n    var svg2 = d3.select(\"#deaths-svg-interpolation-container\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", width_)\r\n        .attr(\"height\", height_)\r\n        .append(\"g\");\r\n\r\n    var colorScale2 = d3.scaleSequential(d3.interpolateRdBu)\r\n        .domain([0, width_])\r\n\r\n    var bars2 = svg2.selectAll(\".bars\")\r\n        .data(d3.range(width_), function(d) { return d; })\r\n        .enter().append(\"rect\")\r\n        .attr(\"class\", \"bars\")\r\n        .attr(\"x\", function(d, i) { return i; })\r\n        .attr(\"y\", 0)\r\n        .attr(\"height\", height_)\r\n        .attr(\"width\", 1)\r\n        .style(\"fill\", function(d, i ) { return colorScale2(d); })\r\n\r\n    var svg3 = d3.select(\"#deaths-svg-interpolation-container\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", width_)\r\n        .attr(\"height\", height_)\r\n        .append(\"g\");\r\n\r\n    var colorScale3 = d3.scaleSequential(d3.interpolateRdYlGn)\r\n        .domain([0, width_])\r\n\r\n    var bars3 = svg3.selectAll(\".bars\")\r\n        .data(d3.range(width_), function(d) { return d; })\r\n        .enter().append(\"rect\")\r\n        .attr(\"class\", \"bars\")\r\n        .attr(\"x\", function(d, i) { return i; })\r\n        .attr(\"y\", 0)\r\n        .attr(\"height\", height_)\r\n        .attr(\"width\", 1)\r\n        .style(\"fill\", function(d, i ) { return colorScale3(d); })\r\n\r\n\r\n    var svg4 = d3.select(\"#deaths-svg-interpolation-container\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", width_)\r\n        .attr(\"height\", height_)\r\n        .append(\"g\");\r\n\r\n    var colorScale4 = d3.scaleSequential(d3.interpolateRdGy)\r\n        .domain([0, width_])\r\n\r\n    var bars4 = svg4.selectAll(\".bars\")\r\n        .data(d3.range(width_), function(d) { return d; })\r\n        .enter().append(\"rect\")\r\n        .attr(\"class\", \"bars\")\r\n        .attr(\"x\", function(d, i) { return i; })\r\n        .attr(\"y\", 0)\r\n        .attr(\"height\", height_)\r\n        .attr(\"width\", 1)\r\n        .style(\"fill\", function(d, i ) { return colorScale4(d); })\r\n\r\n};\r\n\r\nconst DeathsHeatMapViz = (props) => {\r\n    const ref = useRef()\r\n\r\n    // set the dimensions and margins of the graph\r\n    var margin = {top: 10, right: 50, bottom: 70, left: 180},\r\n        width = 510 - margin.left - margin.right,\r\n        height = 410 - margin.top - margin.bottom;\r\n\r\n    var keys = Object.keys(casesFactor[0]);\r\n    keys.shift();\r\n    correlation(casesFactor);\r\n\r\n    useEffect(() => {\r\n\r\n        colorSelector();\r\n\r\n        const heatMapElement = d3.select(\"#deaths-sub-heatmap-vis\")\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \", \" + margin.top +\")\" )\r\n            .style(\"text-anchor\", \"end\")\r\n\r\n        // Build X scales and axis\r\n        var x = scaleBand()\r\n            .range([0, width])\r\n            .domain(data.map(d=>d.group))\r\n            .padding(0.05);\r\n\r\n        heatMapElement.append(\"g\")\r\n            .style(\"fond-size\", 8)\r\n            .attr(\"transform\", \"translate(0, \" + height + \")\")\r\n            .call(d3.axisBottom(x).tickSize(0))\r\n            .select(\".domain\").remove()\r\n\r\n        heatMapElement\r\n            .selectAll(\"text\")\r\n            .attr(\"transform\",\"rotate(90)\" )\r\n            .style(\"text-anchor\", \"start\")\r\n\r\n        // Build Y scales and axis\r\n        var y = scaleBand()\r\n            .range([height, 0])\r\n            .domain(data.map(d=>d.variable))\r\n            .padding(0.05)\r\n\r\n        heatMapElement.append(\"g\")\r\n            .style(\"font-size\", 10)\r\n            .call(d3.axisLeft(y).tickSize(0))\r\n            .select(\".domain\")\r\n            .remove()\r\n\r\n        //interpolateCubehelixDefault\r\n        var myColor = d3.scaleSequential()\r\n            .interpolator(d3.interpolateRdBu)\r\n            .domain([-1, 1])\r\n\r\n        var tooltip = d3.select(\"#deaths-sub-heatmap-vis\")\r\n            .append(\"div\")\r\n            .style(\"opacity\", 0)\r\n            .style(\"background-color\", \"white\")\r\n            .style(\"border\", \"solid\")\r\n            .style(\"border-width\", \"2px\")\r\n            .style(\"border-radius\", \"5px\")\r\n            .style(\"padding\", \"5px\")\r\n            .style(\"max-width\", \"50px\")\r\n        // .style(\"margin-width\", \"300px\")\r\n\r\n        // Three function that change the tooltip when user hover / move / leave a cell\r\n        var mouseover = function(d) {\r\n            // tooltip\r\n            //     .style(\"opacity\", 1)\r\n            d3.select(this)\r\n                .style(\"stroke\", \"black\")\r\n                .style(\"opacity\", 1)\r\n        }\r\n\r\n        var mousemove = function(d) {\r\n\r\n            // tooltip\r\n            //     .html(\"correlation coefficient: \" + d.target.attributes.value.value) /*  <br> new line  */\r\n            //     .style(\"left\", (d3.pointer(this)[0]+80) + \"px\")\r\n            //     .style(\"top\", (d3.pointer(this)[1]) + \"px\")\r\n            //     .style(\"align-items\", 'center')\r\n        }\r\n\r\n        var mouseleave = function(d) {\r\n            // tooltip\r\n            //     .style(\"opacity\", 0)\r\n            d3.select(this)\r\n                .style(\"stroke\", \"none\")\r\n                .style(\"opacity\", 0.8)\r\n        }\r\n\r\n        var click = function(d){\r\n            props.setScatterHorizontal({\"horizon\":d.target.attributes.horizontal.value});\r\n            props.setScatterVertical({\"vert\":d.target.attributes.vertical.value});\r\n        }\r\n\r\n        heatMapElement.selectAll()\r\n            .data(data, function(d) {return d.group+':'+d.variable;})\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", function(d) { return x(d.group) })\r\n            .attr(\"y\", function(d) { return y(d.variable) })\r\n            .attr(\"rx\", 4)\r\n            .attr(\"ry\", 4)\r\n            .attr(\"horizontal\", function(d) {return d.group})\r\n            .attr(\"vertical\", function(d) {return d.variable})\r\n            .attr(\"width\", x.bandwidth() )\r\n            .attr(\"height\", y.bandwidth() )\r\n            .attr(\"value\", function(d) {return d.value})\r\n            .style(\"fill\", function(d) { return myColor(d.value)} )\r\n            .style(\"stroke-width\", 4)\r\n            .style(\"stroke\", \"none\")\r\n            .style(\"opacity\", 0.8)\r\n            .on(\"mouseover\", mouseover)\r\n            .on(\"mousemove\", mousemove)\r\n            .on(\"mouseleave\", mouseleave)\r\n            .on(\"click\", click)\r\n\r\n\r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeathsHeatMapViz;\r\n","import React, {useEffect, useState} from 'react';\r\nimport ResetButton from \"../SubPanels/Buttons/ResetButton\";\r\nimport {Slider} from \"rsuite\";\r\nimport DeathsMultiBrushes from './BrushOnTsne/DeathsMultiBrushes';\r\nimport deathsFactor from '../Data/DeathsFactors.json';\r\nimport DeathsAxesLines from \"../ThreeJSVis/DeathsAxesLines\";\r\nimport DeathParallelLabels from \"../ThreeJSVis/DeathsLabel\";\r\nimport {CovidDeathsCorrelationMatrix} from \"../DataProcessing/DeathsCorrelationTable\";\r\nimport DeathsParallelCoordinates, {Parallel_Lines} from \"../ThreeJSVis/CasesParallelCoordinates\";\r\nimport DeathsPCPLabels, {Parallel_Labels} from \"../ThreeJSVis/CasesParallelCoordinatesLabel\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport DeathsHeatMapViz from \"../SubPanels/CorrHeatMap/DeathsHeatMap\";\r\nimport DeathsScatterPlotViz from \"../SubPanels/ScatterPlot/DeathsScatterPlot\";\r\nimport MI from \"../Data/MutualInfo.json\";\r\nimport MutualInfo from \"../Data/MutualInfo.json\";\r\n\r\nlet [labels, corrMat] =  CovidDeathsCorrelationMatrix(deathsFactor);\r\n// console.log(corrMat);\r\n\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({length:count}, (v,k) => k).map(k => ({\r\n        id:`${labels[k]}`,\r\n        content: `${labels[k]}`,\r\n    }));\r\n\r\n\r\nvar caseObj = {};\r\ncorrMat.forEach(function(item){\r\n   // console.log(item);\r\n    if(item[\"x_feature\"] === \"covid19\"){\r\n        caseObj[item[\"y_feature\"]] = item[\"coeff\"];\r\n\r\n    }\r\n});\r\n\r\nexport default function DeathsMain() {\r\n    const [items, setItems] = useState(getItems(labels.length));\r\n    const [selectedAxes, setSelectedAxes] = useState({});\r\n    const [corrThreshold, setCorrThreshold] = useState({\"corrThreshold\":1});\r\n    const [miThreshold, setMiThreshold] = useState({\"miThreshold\":1});\r\n    const [selectedData, setSelectedData] = useState({});\r\n    const [extractMethod, setExtractMethod] = useState({});\r\n    const [corrSlider, setCorrSlider] = useState(false);\r\n    const [miSlider, setMiSlider] = useState(true);\r\n    const [scatterHorizontal, setScatterHorizontal] = useState({\"horizon\":\"None\"});\r\n    const [scatterVertical, setScatterVertical] = useState({\"vert\":\"None\"});\r\n\r\n    const [vertices, setVertices] = useState([]);\r\n    const [hPoints, setHPoints] = useState([]);\r\n    const [hVertices, setHVertices] = useState([]);\r\n    const [axes, setAxes] = useState([]);\r\n    const [mutual_info, setMI] = useState([]);\r\n    const [weightPos, setWeightPos] = useState([]);\r\n    const [modelWeights, setModelWeights] = useState({});\r\n\r\n    const [label_margin, setLabelMargin] = useState(0);\r\n    const [axes_labels, setAxesLabels] = useState([]);\r\n\r\n\r\n    var mi_max = Math.max.apply(Math, MutualInfo.map(function(o) {return o.mutualInfo}));\r\n    var mi_min = Math.min.apply(Math, MutualInfo.map(function(o) {return o.mutualInfo}));\r\n\r\n    const buttonStyle ={\r\n        color: \"#fff\",\r\n        fontSize: '10px',\r\n        backgroundColor: \"#5a6268\",\r\n        borderColor: \"#6c757d\",\r\n        width:\"100px\",\r\n        height:\"30px\"\r\n    };\r\n    const borderStyle ={\r\n        mozBoxShadow: \"#555 0 0 8px\",\r\n        webkitBoxShadow: \"#555 0 0 8px\",\r\n    }\r\n\r\n    var selectedAxesSubset = {};\r\n\r\n    useEffect(() => {\r\n\r\n        var axesSubset ={};\r\n        if(corrSlider === false ) {\r\n            for (var key in caseObj) {\r\n                if (caseObj[key] <= corrThreshold[\"corrThreshold\"])\r\n                    axesSubset[key] = true;\r\n                else\r\n                    axesSubset[key] = false;\r\n            }\r\n        }\r\n        else if(miSlider === false ){\r\n            for (var pos in MI) {\r\n                //console.log(MI[pos]);\r\n                if (MI[pos][\"mutualInfo\"] >= mi_max - miThreshold[\"miThreshold\"]) {\r\n                    //console.log(pos);\r\n                    axesSubset[MI[pos][\"label\"]] = true;\r\n                }else{\r\n                    axesSubset[MI[pos][\"label\"]] = false;\r\n                }\r\n            }\r\n        }\r\n        selectedAxesSubset = axesSubset;\r\n    }, [items, selectedAxes, selectedData, corrThreshold, miThreshold, corrSlider, miSlider, vertices]);\r\n\r\n    return (\r\n        <div id=\"covid19-deaths-wrapper\">\r\n            &nbsp;\r\n            <div id=\"deaths-vis-brush-and-pcp\" style={{border:'solid #F5F5F5'}}>\r\n                <div id=\"my-cases-vis-wrapper\">\r\n                    &nbsp;\r\n                    <div id=\"deaths-pcp-wrapper\" style={{width:'800px', height:'400px'}}>\r\n                        <b style={{height:'20px'}}>state-by-state variables</b>\r\n                        <div className=\"deaths-pcp-vis\" id=\"deaths-pcp-threejs\" style={{height:'400px'}} >\r\n                            <DeathsParallelCoordinates axes={axes} vertices={vertices} hVertices={hVertices} weightPos={weightPos} modelWeights={modelWeights} mutual_info={mutual_info} hPoints={hPoints} style={{marginTop:'250px'}} />\r\n                        </div>\r\n                        <div className=\"deaths-pcp-labels\" id=\"deaths-pcp-axes-labels\"  style={{display:'flex', marginLeft:'10px', height:'180px'/*, marginTop: '460px'*/}} >\r\n                            <DeathsPCPLabels label_margin={label_margin} axes_labels={axes_labels}></DeathsPCPLabels>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"deaths-sub-multibrush\"  style={{marginTop: '-0.5rem'}} >{/*id =\"cases-brush-wrapper\" */}\r\n                        <div id=\"deaths-feature-extraction\" width=\"450\" style={{marginLeft: '1.8rem', marginTop: '0.8rem', textAlign:'left'}}>\r\n                            <div onChange={ v =>{\r\n                                setExtractMethod(v.target.value);\r\n                                if(v.target.value === \"correlation\"){\r\n                                    setCorrSlider(false);\r\n                                    setMiSlider(true);\r\n                                }\r\n                                if(v.target.value === \"mutualInformation\"){\r\n                                    setCorrSlider(true);\r\n                                    setMiSlider(false);\r\n                                }\r\n                            }}>\r\n                                <input type=\"radio\" value=\"mutualInformation\" name=\"extract-method\"/> Mutual Information &nbsp;\r\n                                <input type=\"radio\" value=\"correlation\" name=\"extract-method\" defaultChecked/> Correlation  &nbsp;\r\n                            </div>\r\n                            <div id=\"deaths-feature-extraction-slider\">\r\n                                <b style={{height:'20px'}}> Correlation with confirmed cases </b>\r\n                                &nbsp;\r\n                                <Slider\r\n                                    min={0}\r\n                                    max={1}\r\n                                    step = {0.01}\r\n                                    defaultValue ={1.0}\r\n                                    onChange = { v => {\r\n                                        setCorrThreshold({corrThreshold:v});\r\n                                    }}\r\n                                    disabled={corrSlider}\r\n                                    style={{ width: 200 }}  />\r\n\r\n                                <b style={{height:'20px'}}> Mutual Information </b>\r\n                                &nbsp;\r\n                                <Slider\r\n                                    min={mi_min}\r\n                                    max={mi_max}\r\n                                    step = {0.01}\r\n                                    defaultValue ={1.0}\r\n                                    onChange = { v => {\r\n                                        setMiThreshold({miThreshold:v});\r\n                                    }}\r\n                                    disabled={miSlider}\r\n                                    style={{ width: 200 }}  />\r\n                            </div>\r\n\r\n                            <div style={ {marginLeft: '0.1rem', marginBottom:'1.3rem', marginTop:'2.8rem'}}>\r\n                                <Button\r\n                                    variant =\"primary\"\r\n                                    onClick = {() => {\r\n                                        var {axes, vertices, hVertices, weightPos, modelWeights, mi, hLineSet} =\r\n                                            Parallel_Lines(corrSlider, corrThreshold, miSlider, miThreshold, selectedData);\r\n                                        setAxes(axes);\r\n                                        setVertices(vertices);\r\n                                        setHVertices(hVertices);\r\n                                        setWeightPos(weightPos);\r\n                                        setModelWeights(modelWeights);\r\n                                        setMI(mi);\r\n                                        setHPoints(hLineSet);\r\n\r\n                                        var {label_margin, axes_labels} =\r\n                                            Parallel_Labels(corrSlider, corrThreshold, miSlider, miThreshold);\r\n                                        setLabelMargin(label_margin);\r\n                                        setAxesLabels(axes_labels);\r\n                                    }}\r\n                                    style={buttonStyle}>\r\n                                    Apply\r\n                                </Button>\r\n                            </div>\r\n                            {/*<div style={ {marginLeft: '6.5rem', marginBottom:'1.3rem', marginTop:'2.8rem'}}>*/}\r\n                            {/*    <ResetButton class=\"btn-float-left\" onClick={resetVariables()}></ResetButton>*/}\r\n                            {/*</div>*/}\r\n                            <b>  </b>\r\n                            <DeathsMultiBrushes items={items} setSelectedData={setSelectedData} setSelectedAxes={setSelectedAxes}></DeathsMultiBrushes>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <div id=\"deaths-sub-wrapper\">\r\n                <div className=\"deaths-sub-heatmap\" id=\"deaths-sub-heatmap-vis\">\r\n                    <div id=\"deaths-svg-interpolation-container\">\r\n                    </div>\r\n                    <DeathsHeatMapViz setScatterHorizontal={setScatterHorizontal} setScatterVertical={setScatterVertical} ></DeathsHeatMapViz>\r\n                </div>\r\n                <div className=\"deaths-sub-scatterplot\" id=\"deaths-sub-scatterplot-vis\">\r\n                    <DeathsScatterPlotViz scatterHorizontal={scatterHorizontal} scatterVertical={scatterVertical}></DeathsScatterPlotViz>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n//\r\n// <div id=\"covid19-deaths-wrapper\">\r\n//     <div style={{marginLeft: '1.8rem', marginBottom: '1.3rem', marginTop: '2.8rem'}}>\r\n//         <ResetButton class=\"btn-float-left\"/>\r\n//     </div>\r\n//\r\n//     <div id=\"feature-extraction-deaths-slider\" width=\"450\"\r\n//          style={{marginLeft: '1.8rem', marginTop: '3.8rem', textAlign: 'left'}}>\r\n//         <b style={{height: '20px'}}> Correlation with death cases </b>\r\n//         <Slider\r\n//             min={0}\r\n//             max={1}\r\n//             step={0.01}\r\n//             defaultValue={1.0}\r\n//             onChange={v => {\r\n//                 //  console.log(v);\r\n//                 setCorrThreshold({corrThreshold:v});\r\n//             }}\r\n//             style={{width: 200}}/>\r\n//     </div>\r\n//\r\n//     <div id=\"deaths-vis-brush-and-pcp\">\r\n//         <div id=\"my-deaths-vis-wrapper\">\r\n//             <div id=\"deaths-brush-wrapper\">\r\n//                 <b> state-by-state data projected by t-SNE </b>\r\n//                 <CovidDeathBrush items={items} setSelectedAxes={setSelectedAxes}\r\n//                                  setSelectedData={setSelectedData}>\r\n//                 </CovidDeathBrush>\r\n//             </div>\r\n//             &nbsp;\r\n//\r\n//             <div id=\"deaths-pcp-wrapper\" style={{width: '600px', height: '400px'}}>\r\n//                 <b style={{height: '20px'}}>explanatory variables, covid-19</b>\r\n//                 <div className=\"deaths-pcp-vis\" id=\"deaths-pcp-threejs\" style={{height: '400px', width: '600px'}}>\r\n//                     <DeathsAxesLines items={items} selectedAxes={selectedAxes} selectedData={selectedData}\r\n//                                      corrThreshold={corrThreshold} style={{marginTop: '250px'}}/>\r\n//                 </div>\r\n//                 <div className=\"deaths-pcp-labels\" id=\"deaths-pcp-axes-labels\"\r\n//                      style={{display: 'flex', marginLeft: '10px', height: '180px'/*, marginTop: '460px'*/}}>\r\n//                     <DeathParallelLabels corrThreshold={corrThreshold}/>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     </div>\r\n//\r\n// </div>\r\n","//import React, {Component, useEffect, useState} from 'react';\r\nimport React, {Component} from 'react';\r\nimport './style.css';\r\nimport worker from \"./../worker.js\";\r\nimport WebWorker from \"./../workerSetup\";\r\nimport CasesMain from \"./MainPanels/CasesMain\";\r\nimport DeathsMain from \"./MainPanels/DeathsMain\";\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\n\r\nclass PCPViz extends Component{\r\n\r\n    componentDidMount = () => {\r\n        this.worker = new WebWorker(worker);\r\n    };\r\n\r\n    fetchWebWorker = () => {\r\n        this.worker.postMessage(\"Fetch Users\");\r\n        //console.log(\"Fetch\");\r\n        this.worker.addEventListener(\"message\", event => {\r\n            this.setState({\r\n                count: event.data.length\r\n            });\r\n        });\r\n        this.worker.onmessage = event => {\r\n            //  console.log(event.data);\r\n            console.log(\"done\");\r\n\r\n        }\r\n    };\r\n\r\n/*\r\n    useEffect( () =>{\r\n        init('webgl');\r\n    });\r\n*/\r\n     render() {\r\n        //init('webgl');\r\n        return (\r\n            <div className=\"pcp\">\r\n                <div className = \"cases-pcp\">\r\n                    <h2>\r\n                        Suspected influential variables for COVID-19 confirmed cases\r\n                    </h2>\r\n                    &nbsp;\r\n\r\n                    <CasesMain></CasesMain>\r\n\r\n                    <div id=\"pcp-ui-wrapper\" key=\"ui-\">\r\n                        {/*&nbsp;*/}\r\n                        {/*<button onClick={GeneticAlgorithm(4)}> Generate Maximum Correlation Order</button>*/}\r\n                        {/*&nbsp;*/}\r\n                        {/*<input type=\"text\" id=\"myinput\" disabled={true} />*/}\r\n                        {/*<button> Use this sequence</button>*/}\r\n                        {/*&nbsp;*/}\r\n                    </div>\r\n\r\n                    &nbsp;\r\n                    {/*<div id=\"corr-table-wrapper\">*/}\r\n\r\n                    {/*    <b>Correlation Table For Variables</b>*/}\r\n                    {/*    <table id=\"correlation-table\">*/}\r\n                    {/*        <CorrelationTable></CorrelationTable>*/}\r\n                    {/*    </table>*/}\r\n                    {/*</div>*/}\r\n                </div>\r\n\r\n\r\n                {/*<div className=\"deaths-pcp\">*/}\r\n                {/*     <h2>*/}\r\n                {/*         (3) What are the disease conditions contributing to deaths the most involving covid-19 (Cormorbities)?*/}\r\n                {/*     </h2>*/}\r\n                {/*     &nbsp;*/}\r\n                {/*     <DeathsMain></DeathsMain>*/}\r\n                {/*     &nbsp;*/}\r\n                {/*</div>*/}\r\n\r\n            </div>\r\n\r\n     );\r\n    }\r\n}\r\nexport default PCPViz;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass SelectOption extends React.Component{\r\n    /*constructor(props){\r\n        super(props);\r\n        this.usState = {\r\n            whichState : 'OR'\r\n        };\r\n    }*/\r\n    render(){\r\n        const usState = this.props.usState;\r\n        const handleOnSelect = this.props.handleOnSelect;\r\n        return(\r\n            <form>\r\n                <select value ={this.props.usState} onChange={event => handleOnSelect(event)} style={{float:\"right\"}}>\r\n                    <option value =\"AL\">AL</option>\r\n                    <option value =\"AK\">AK</option>\r\n                    <option value =\"AZ\">AZ</option>\r\n                    <option value =\"AR\">AR</option>\r\n                    <option value =\"CA\">CA</option>\r\n                    <option value =\"CO\">CO</option>\r\n                    <option value =\"CT\">CT</option>\r\n                    <option value =\"DE\">DE</option>\r\n                    <option value =\"FL\">FL</option>\r\n                    <option value =\"GA\">GA</option>\r\n                    <option value =\"HI\">HI</option>\r\n                    <option value =\"ID\">ID</option>\r\n                    <option value =\"IL\">IL</option>\r\n                    <option value =\"IN\">IN</option>\r\n                    <option value =\"IA\">IA</option>\r\n                    <option value =\"KS\">KS</option>\r\n                    <option value =\"KY\">KY</option>\r\n                    <option value =\"LA\">LA</option>\r\n                    <option value =\"ME\">ME</option>\r\n                    <option value =\"MD\">MD</option>\r\n                    <option value =\"MA\">MA</option>\r\n                    <option value =\"MI\">MI</option>\r\n                    <option value =\"MN\">MN</option>\r\n                    <option value =\"MS\">MS</option>\r\n                    <option value =\"MO\">MO</option>\r\n                    <option value =\"MT\">MT</option>\r\n                    <option value =\"NE\">NE</option>\r\n                    <option value =\"NV\">NV</option>\r\n                    <option value =\"NH\">NH</option>\r\n                    <option value =\"NJ\">MJ</option>\r\n                    <option value =\"NM\">NM</option>\r\n                    <option value =\"NY\">NY</option>\r\n                    <option value =\"NC\">NC</option>\r\n                    <option value =\"ND\">ND</option>\r\n                    <option value =\"OH\">OH</option>\r\n                    <option value =\"OK\">OK</option>\r\n                    <option value =\"OR\">OR</option>\r\n                    <option value =\"PA\">PA</option>\r\n                    <option value =\"RI\">RI</option>\r\n                    <option value =\"SC\">SC</option>\r\n                    <option value =\"SD\">SD</option>\r\n                    <option value =\"TN\">TN</option>\r\n                    <option value =\"TX\">TX</option>\r\n                    <option value =\"UT\">UT</option>\r\n                    <option value =\"VT\">VT</option>\r\n                    <option value =\"VA\">VA</option>\r\n                    <option value =\"WA\">WA</option>\r\n                    <option value =\"WV\">WV</option>\r\n                    <option value =\"WI\">WI</option>\r\n                    <option value =\"WY\">WY</option>\r\n\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default SelectOption;\r\n//ReactDOM.render(<SelectOption />, document.getElementById('root'));","import React, {useEffect, useState} from 'react';\r\nimport * as d3 from \"d3\";\r\nimport uStates from \"./uStates\";\r\nimport data from './DailyStats091513.json';\r\nimport './style.css';\r\n\r\n\r\nfunction MapViz(){\r\n    const usMapContainerVis={\r\n\r\n    };\r\n    const usMapContainerDetails={\r\n\r\n    };\r\n    const refTextStyle= {\r\n        \"height\": \"50px\",\r\n        \"width\": \"90%\",\r\n        \"textAlign\": \"right\",\r\n        \"position\": \"relative\"\r\n    }\r\n\r\n    const [cstate, setCstate] = useState(\"cases\");\r\n    // onSelect event\r\n    const handleOnSelect = (event) => {\r\n        const value = event.currentTarget.value;\r\n       // console.log(value);\r\n        setCstate(value);\r\n\r\n    }\r\n\r\n    function tooltipHtml(n, d){\t// function to create html content string in tooltip div.\r\n        return \"<h4>\"+n+\"</h4><table>\"+\r\n            \"<tr><td>Cases</td><td>\"+(d.sum)+\"</td></tr>\"+\r\n            \"<tr><td>Deaths</td><td>\"+(d.death)+\"</td></tr>\"+\r\n            \"</table>\";\r\n    }\r\n\r\n    var sampleData ={};\t/* Sample random data. */\r\n\r\n    data.forEach(function(d){\r\n        if(!cstate.localeCompare(\"cases\")) {\r\n            sampleData[d[\"\"]] = {\r\n                sum: d[\"sum\"], color: d3.interpolate(\"#ffffcc\", \"#800026\")(+(d[\"sum\"]) / 500000), death: d[\"death\"]\r\n            };\r\n        }\r\n        else{\r\n            sampleData[d[\"\"]] = {\r\n                sum: d[\"sum\"], color: d3.interpolate(\"#ddc5cc\", \"#88314b\")(+(d[\"death\"]) / 8000), death: d[\"death\"]\r\n            };\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const usMapElement = d3.select(\"#my-usmap-viz\");\r\n        usMapElement.select(\"svg\").remove();\r\n        usMapElement.append(\"svg\")\r\n            .attr(\"width\", 950)\r\n            .attr(\"height\", 600)\r\n            .append(\"g\")\r\n            .attr(\"id\", \"statesmap\")\r\n\r\n        uStates.draw(\"#statesmap\", sampleData, tooltipHtml);\r\n    }, [cstate])\r\n\r\n    return (\r\n        <div className=\"cases\">\r\n            <h2>\r\n                Confirmed Cases / Deaths\r\n            </h2>\r\n                <form>\r\n                    <select cstate={cstate} onChange={handleOnSelect}>\r\n                        <option value =\"cases\">confirmed cases</option>\r\n                        <option value =\"death\">deaths</option>\r\n                    </select>\r\n                </form>\r\n\r\n            <div className=\"usmap-container-vis\" id=\"my-usmap-viz\" style={usMapContainerVis}>\r\n                <div id = \"usmap_tooltip\"></div>\r\n            </div>\r\n            <div className=\"usmap-container-details\" style={usMapContainerDetails}> </div>\r\n            <div  style={refTextStyle}> updated 8/26, Source: google Coronavirus disease overview</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapViz;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport {scaleBand} from 'd3-scale';\r\n//import {mouse} from 'd3-selection';\r\nimport disease_correlation from './DiseaseCorr2.json';\r\n\r\nconst HeatMap = () => {\r\n    const ref = useRef()\r\n    //var myGroups = disease_correlation.map(data => {return data.group;}).keys()\r\n    //var myVar = disease_correlation.map(data =>{return data.variables;}).keys()\r\n\r\n    // set the dimensions and margins of the graph\r\n    var margin = {top: 80, right: 100, bottom: 410, left: 450},\r\n        width = 1200 - margin.left - margin.right,\r\n        height = 1200 - margin.top - margin.bottom;\r\n\r\n    useEffect(() => {\r\n        //const svgElement = d3.select(ref.current)\r\n\r\n        const heatMapElement = d3.select(\"#my_dataviz\")\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \", \" + margin.top +\")\" )\r\n            .style(\"text-anchor\", \"end\")\r\n\r\n       // console.log(heatMapElement)\r\n            //.style('fill', function(d) { console.log(d)})\r\n\r\n        // Build X scales and axis\r\n        var x = scaleBand()\r\n            .range([0, width])\r\n            .domain(disease_correlation.map(d=>d.group))\r\n            .padding(0.05)\r\n\r\n\r\n        heatMapElement.append(\"g\")\r\n            .style(\"fond-size\", 8)\r\n            .attr(\"transform\", \"translate(0, \" + height + \")\")\r\n            .call(d3.axisBottom(x).tickSize(0))\r\n            .select(\".domain\").remove()\r\n\r\n        heatMapElement\r\n            .selectAll(\"text\")\r\n            .attr(\"transform\",\"rotate(90)\" )\r\n            .style(\"text-anchor\", \"start\")\r\n\r\n        // Build Y scales and axis\r\n        var y = scaleBand()\r\n            .range([height, 0])\r\n            .domain(disease_correlation.map(d=>d.variable))\r\n            .padding(0.05)\r\n\r\n        heatMapElement.append(\"g\")\r\n            .style(\"font-size\", 10)\r\n            .call(d3.axisLeft(y).tickSize(0))\r\n            .select(\".domain\")\r\n            .remove()\r\n\r\n        heatMapElement.selectAll(\"text\")\r\n            .attr(\"font-weight\",\"bold\")\r\n            .style('fill', function(d) {if(d ==\"COVID-19(U071)\") return 'red'})\r\n\r\n        var myColor = d3.scaleSequential()\r\n            .interpolator(d3.interpolateInferno)\r\n            .domain([-1, 1])\r\n\r\n        var tooltip = d3.select(\"#my_dataviz\")\r\n            .append(\"div\")\r\n            .style(\"opacity\", 0)\r\n            // .attr(\"class\", \"tooltip\")\r\n            .style(\"background-color\", \"white\")\r\n            .style(\"border\", \"solid\")\r\n            .style(\"border-width\", \"2px\")\r\n            .style(\"border-radius\", \"5px\")\r\n            .style(\"padding\", \"5px\")\r\n            .style(\"max-width\", \"450px\")\r\n            .style(\"margin-width\", \"300px\")\r\n\r\n        // Three function that change the tooltip when user hover / move / leave a cell\r\n        var mouseover = function(d) {\r\n            tooltip\r\n                .style(\"opacity\", 1)\r\n            d3.select(this)\r\n                .style(\"stroke\", \"black\")\r\n                .style(\"opacity\", 1)\r\n        }\r\n\r\n        var mousemove = function(d) {\r\n           // console.log(d);\r\n            tooltip\r\n                .html(\"The correlation coefficient value of this cell is: \" + d.target.attributes.value.value) /*  <br> new line  */\r\n                .style(\"left\", (d3.pointer(this)[0]+80) + \"px\")\r\n                .style(\"top\", (d3.pointer(this)[1]) + \"px\")\r\n                .style(\"align-items\", 'center')\r\n\r\n        }\r\n\r\n        var mouseleave = function(d) {\r\n            tooltip\r\n                .style(\"opacity\", 0)\r\n            d3.select(this)\r\n                .style(\"stroke\", \"none\")\r\n                .style(\"opacity\", 0.8)\r\n        }\r\n\r\n        // add the squares\r\n        heatMapElement.selectAll()\r\n            .data(disease_correlation, function(d) {return d.group+':'+d.variable;})\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", function(d) { return x(d.group) })\r\n            .attr(\"y\", function(d) { return y(d.variable) })\r\n            .attr(\"rx\", 4)\r\n            .attr(\"ry\", 4)\r\n            .attr(\"width\", x.bandwidth() )\r\n            .attr(\"height\", y.bandwidth() )\r\n            .attr(\"value\", function(d) {return d.value})\r\n            .style(\"fill\", function(d) { return myColor(d.value)} )\r\n            .style(\"stroke-width\", 4)\r\n            .style(\"stroke\", \"none\")\r\n            .style(\"opacity\", 0.8)\r\n            .on(\"mouseover\", mouseover)\r\n            .on(\"mousemove\", mousemove)\r\n            .on(\"mouseleave\", mouseleave)\r\n\r\n        /*svgElement.append(\"circle\")\r\n            .attr(\"cx\", 150)\r\n            .attr(\"cy\", 70)\r\n            .attr(\"r\",  50)*/\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <svg height = \"0\" width =\"0\"\r\n             ref={ref}\r\n        ></svg>\r\n    )\r\n}\r\n\r\nexport default HeatMap;\r\n","import React from 'react';\r\nimport HeatMap from \"./HeatMap\";\r\n\r\nclass HeatMapViz extends React.Component {\r\n\r\n    render() {\r\n        const heatmapContainerDetails = {\r\n            textAlign: \"left\",\r\n            position: \"relative\",\r\n            margin: \"0px 150px\"\r\n        };\r\n        const heatmapContainerVis={\r\n\r\n        };\r\n        return (\r\n            <div className=\"conditions\">\r\n                <h2>\r\n                    Conditions contributing to deaths involving covid-19 (U071)\r\n                </h2>\r\n                <div className=\"heatmap-container-vis\" id=\"my_dataviz\" style={heatmapContainerVis}>\r\n                    <HeatMap></HeatMap>\r\n                </div>\r\n                <div className=\"heatmap-container-details\" style={heatmapContainerDetails}>\r\n                    <p><b>Description of Disease</b></p><br/>\r\n                    0: J09-J18 (Respiratory diseases - Influenza and pneumonia)<br/>\r\n                    1: J40-J47 (Respiratory diseases - Chronic lower respiratory diseases)<br/>\r\n                    2: J80 (Respiratory diseases - Adult respiratory distress syndrome)<br/>\r\n                    3: J96 (Respiratory diseases - Respiratory failure)<br/>\r\n                    4: R09.2 (Respiratory diseases - Respiratory arrest)<br/>\r\n                    5: J00-J06, J20-J39, J60-J70, J81-J86, J90-J95, J97-J99, U04 (Other diseases of the respiratory\r\n                    system)<br/>\r\n                    6: I10-I15 (Circulatory diseases - Hypertensive diseases)<br/>\r\n                    7: I20-I25 (Circulatory diseases - Ischemic heart disease)<br/>\r\n                    8: I46 (Circulatory diseases - Cardiac arrest)<br/>\r\n                    9: I44, I45, I47-I49 (Circulatory diseases - Cardiac arrhythmia)<br/>\r\n                    10: I50 (Circulatory diseases - Heart failure)<br/>\r\n                    11: I60-I69 (Circulatory diseases -Cerebrovascular diseases)<br/>\r\n                    12: I00-I09, I26-I43, I51, I52, I70-I99 (Circulatory diseases - Other diseases of the circulatory\r\n                    system)<br/>\r\n                    13: A40-A41 (Sepsis)<br/>\r\n                    14: C00-C97 (Malignant neoplasms)<br/>\r\n                    15: G30:14 (Alzheimer disease)<br/>\r\n                    16: N17-N19 (Renal failure)<br/>\r\n                    17: S00-T98, V01-X59, X60-X84, X85-Y09, Y10-Y36, Y40-Y89, U01-U03 (Intentional and unintentional\r\n                    injury, poisoning, and other adverse events)<br/>\r\n                    18: A00-A39, A42-B99, D00-E07, E15-E64, E70-E90, F00, F02, F04-G26, G31-H95, K00-K93, L00-M99,\r\n                    N00-N16, N20-N98, O00-O99, P00-P96, Q00-Q99, R00-R08, R09.0, R09.1, R09.3, R09.8, R10-R99 (All other\r\n                    residual conditions)<br/>\r\n                    19: E10-E14 (Diabetes)<br/>\r\n                    20: E65-E68 (Obesity)<br/>\r\n                    21: F01, F03 (Vascular and unspecified dementia)<br/>\r\n                    <p>22: U071 (COVID-19)</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeatMapViz;\r\n","import PCPViz from \"./PCPViz/PCPViz\";\r\nimport BarViz from \"./BarViz/BarViz\";\r\nimport MapViz from \"./MapViz/MapViz\";\r\nimport HeatMapViz from \"./HeatMapViz/HeatMapViz\";\r\nimport SphericalPCPViz from \"./ExtraPCP/SphericalPCP\";\r\nimport CylindricalPCPViz from \"./ExtraPCP/CylindricalPCP\";\r\nimport Home from \"./Home\";\r\nimport React from \"react\";\r\nimport TestText from \"./ExtraPCP/TestText\";\r\n\r\nexport default function CovidMain() {\r\n\r\n    return (\r\n        <div className=\"Covid\">\r\n            <header className=\"App-header\">\r\n                COVID-19 Data Visualization in USA\r\n            </header>\r\n\r\n                <PCPViz></PCPViz>\r\n                {/*<BarViz></BarViz>*/}\r\n                {/*<MapViz></MapViz>*/}\r\n                {/*<HeatMapViz></HeatMapViz>*/}\r\n                {/*<SphericalPCPViz></SphericalPCPViz>*/}\r\n                {/*<CylindricalPCPViz></CylindricalPCPViz>*/}\r\n                {/*<TestText></TestText>*/}\r\n\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function OtherVis() {\r\n\r\n    return (\r\n        <div className=\"Others\">\r\n\r\n        </div>\r\n    );\r\n}","\r\nimport { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React from 'react';\nimport {Router, Route, Switch} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./Home\";\nimport CovidMain from \"./CovidMain\";\nimport OtherVis from \"./MyOthers\";\nimport history from \"./history\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <div className=\"main\">\n                <Router history={history}>\n                    <Switch>\n                <Route path =\"/\" exact component={CovidMain}/>\n                <Route path =\"/Others\" component={OtherVis}/>\n                    </Switch>\n                <Home />\n                </Router>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}